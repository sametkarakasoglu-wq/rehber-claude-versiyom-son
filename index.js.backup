/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
// Simple pseudo-ReactDOM render function
function render(element, container) {
    if (container) {
        container.innerHTML = element;
        // Add event listeners after rendering
        attachEventListeners();
    }
}
// State management
let state = {
    activePage: 'dashboard',
    isVehicleModalOpen: false,
    isRentalModalOpen: false,
    isCustomerModalOpen: false,
    isCheckInModalOpen: false,
    isReservationModalOpen: false,
    isMaintenanceModalOpen: false,
    isRentalEditModalOpen: false,
    isReservationEditModalOpen: false,
    isMaintenanceEditModalOpen: false,
    editingVehicleIndex: null,
    editingReservationId: null,
    editingMaintenanceId: null,
    editingCustomerIndex: null,
    editingRentalId: null,
    selectedVehicleForAction: null,
    theme: 'light', // For theme switching
    vehicleStatusFilter: null, // For dashboard filtering
    searchTerm: '', // For search functionality
    filterExpiring: false, // For vehicle page expiring filter
    rentalFormCustomerType: 'existing', // For the rental modal
    notificationFilter: 'all', // For notifications page
    readNotifications: [], // Array of timestamps for read notifications
    settings: {
        // Dashboard
        db_metric_total: true,
        db_metric_rented: true,
        db_metric_maintenance: true,
        db_metric_income: true,
        // Vehicle & Reminders
        reminder_days: 30,
        vehicle_btn_rent: true,
        vehicle_btn_checkin: true,
        vehicle_btn_edit: true,
        // Notifications
        notif_type_insurance: true,
        notif_type_inspection: true,
        notif_type_activity: true,
        // PDF Settings
        companyInfo: {
            name: 'Rehber Rent a Car',
            address: 'Örnek Mah. Test Sk. No:1, İstanbul',
            phone: '0212 123 45 67',
            email: 'info@rehberrent.com',
            iban: 'TR00 0000 0000 0000 0000 0000',
            logo: null, // Will store base64
            pdfBackground: null, // NEW: For PDF background image
        },
        pdfSettings: {
            showLogo: true,
            showFooter: true,
            showBackground: true, // NEW: Toggle for background
        }
    }
};
// State update function
function setState(newState) {
    state = { ...state, ...newState };
    saveDataToLocalStorage(); // ÖNCE veriyi kaydet. Bu, eklenti çakışmalarını önler.
    renderApp();
}
// Verileri localStorage'a kaydetme fonksiyonu
function saveDataToLocalStorage() {
    try {
        const appData = {
            vehiclesData,
            customersData,
            rentalsData,
            reservationsData,
            maintenanceData,
            activitiesData,
            theme: state.theme,
            readNotifications: state.readNotifications,
            settings: state.settings,
        };
        localStorage.setItem('rehberOtomotivData', JSON.stringify(appData));
    }
    catch (error) {
        console.error("!!! HATA: Veri localStorage'a kaydedilirken bir sorun oluştu:", error);
    }
}
// Navigation function
function navigateTo(pageId) {
    setState({
        activePage: pageId,
        searchTerm: '',
        vehicleStatusFilter: null,
        filterExpiring: false, // Reset expiring filter on page change
    });
}
// Data for navigation links
const navItems = [
    { id: 'dashboard', icon: 'fa-solid fa-chart-pie', text: 'Gösterge Paneli' },
    { id: 'vehicles', icon: 'fa-solid fa-car', text: 'Araçlar' },
    { id: 'customers', icon: 'fa-solid fa-users', text: 'Müşteriler' },
    { id: 'rentals', icon: 'fa-solid fa-file-contract', text: 'Kiralamalar' },
    { id: 'reservations', icon: 'fa-solid fa-calendar-days', text: 'Rezervasyonlar' },
    { id: 'maintenance', icon: 'fa-solid fa-screwdriver-wrench', text: 'Bakım' },
    { id: 'reports', icon: 'fa-solid fa-file-pdf', text: 'Raporlar' },
    { id: 'notifications', icon: 'fa-solid fa-bell', text: 'Bildirimler' },
    { id: 'settings', icon: 'fa-solid fa-gear', text: 'Ayarlar' },
];
// Data for quick access buttons
const quickAccessItems = [
    { id: 'vehicles', icon: 'fa-solid fa-car-side', text: 'Araç Ekle', className: 'btn-add-vehicle' },
    { id: 'customers', icon: 'fa-solid fa-user-plus', text: 'Müşteri Ekle', className: 'btn-add-customer' },
    { id: 'rentals', icon: 'fa-solid fa-file-signature', text: 'Kiralama Başlat', className: 'btn-start-rental' },
    { id: 'maintenance', icon: 'fa-solid fa-oil-can', text: 'Bakım Kaydı', className: 'btn-add-maintenance' },
];
let activitiesData = [];
function logActivity(icon, message) {
    activitiesData.unshift({ icon, message, time: new Date() }); // Store as Date object
    if (activitiesData.length > 10)
        activitiesData.pop(); // Keep the list size manageable
}
let vehiclesData = [
    { plate: '34 ABC 123', brand: 'Ford Focus', km: '120,500', status: 'Müsait', insuranceDate: '2025-10-15', inspectionDate: '2025-08-01', insuranceFile: 'sigorta.pdf', inspectionFile: 'muayene.pdf', licenseFile: 'ruhsat.jpg', insuranceFileUrl: null, inspectionFileUrl: null, licenseFileUrl: null },
    { plate: '06 XYZ 789', brand: 'Renault Clio', km: '85,200', status: 'Kirada', insuranceDate: '2024-12-20', inspectionDate: '2025-01-10', insuranceFile: 'sigorta.pdf', inspectionFile: null, licenseFile: 'ruhsat.jpg', rentedBy: { name: 'Mehmet Öztürk', phone: '0544 567 89 01' }, insuranceFileUrl: null, inspectionFileUrl: null, licenseFileUrl: null, activeRentalId: 1 },
    { plate: '35 DEF 456', brand: 'Fiat Egea', km: '45,000', status: 'Bakımda', insuranceDate: '2025-05-01', inspectionDate: '2024-11-22', insuranceFile: null, inspectionFile: 'muayene.pdf', licenseFile: 'ruhsat.jpg', insuranceFileUrl: null, inspectionFileUrl: null, licenseFileUrl: null },
    { plate: '16 GHI 789', brand: 'Volkswagen Passat', km: '180,000', status: 'Müsait', insuranceDate: '2025-02-28', inspectionDate: '2025-03-15', insuranceFile: 'sigorta.pdf', inspectionFile: 'muayene.pdf', licenseFile: null, insuranceFileUrl: null, inspectionFileUrl: null, licenseFileUrl: null },
    { plate: '41 JKL 123', brand: 'Hyundai i20', km: '62,300', status: 'Kirada', insuranceDate: '2024-09-05', inspectionDate: '2025-09-05', insuranceFile: 'sigorta.pdf', inspectionFile: 'muayene.pdf', licenseFile: 'ruhsat.jpg', rentedBy: { name: 'Ayşe Kaya', phone: '0533 987 65 43' }, insuranceFileUrl: null, inspectionFileUrl: null, licenseFileUrl: null, activeRentalId: 2 },
];
let customersData = [
    {
        id: 1,
        name: 'Ahmet Yılmaz',
        tc: '12345678901',
        phone: '0555 123 45 67',
        email: 'ahmet.yilmaz@example.com',
        address: 'Örnek Mah. Test Sk. No: 1 Daire: 2, İstanbul',
        licenseNumber: 'A1234567',
        licenseDate: '25.10.2015',
        idFile: 'kimlik.jpg', idFileUrl: null,
        licenseFile: 'ehliyet.jpg', licenseFileUrl: null,
        rentals: [
            { plate: '34 ABC 123', date: '15.01.2024 - 20.01.2024', status: 'Tamamlandı' },
            { plate: '06 XYZ 789', date: '01.12.2023 - 05.12.2023', status: 'Tamamlandı' },
        ]
    },
    {
        id: 2,
        name: 'Ayşe Kaya',
        tc: '98765432109',
        phone: '0533 987 65 43',
        email: 'ayse.kaya@example.com',
        address: 'Deneme Mah. Prova Sk. No: 3 Daire: 4, Ankara',
        licenseNumber: 'B7654321',
        licenseDate: '10.05.2018',
        idFile: null, idFileUrl: null,
        licenseFile: 'ehliyet.jpg', licenseFileUrl: null,
        rentals: [
            { plate: '41 JKL 123', date: '10.02.2024 - 15.02.2024', status: 'Aktif' },
        ]
    },
    {
        id: 3,
        name: 'Mehmet Öztürk',
        tc: '56789012345',
        phone: '0544 567 89 01',
        email: 'mehmet.ozturk@example.com',
        address: 'Yazılım Mah. Kod Sk. No: 5 Daire: 6, İzmir',
        licenseNumber: 'C5678901',
        licenseDate: '01.02.2012',
        idFile: null, idFileUrl: null,
        licenseFile: null, licenseFileUrl: null,
        rentals: []
    },
];
let rentalsData = [
    { id: 1, vehiclePlate: '06 XYZ 789', customerId: 3, startDate: '2024-05-10', endDate: null, startKm: 85200, endKm: null, price: 1200, priceType: 'daily', totalCost: null, contractFile: null, contractFileUrl: null, invoiceFile: null, invoiceFileUrl: null, status: 'active' },
    { id: 2, vehiclePlate: '41 JKL 123', customerId: 2, startDate: '2024-05-15', endDate: null, startKm: 62300, endKm: null, price: 25000, priceType: 'monthly', totalCost: null, contractFile: 'sozlesme.pdf', contractFileUrl: null, invoiceFile: null, invoiceFileUrl: null, status: 'active' },
];
let reservationsData = [
    { id: 1, vehiclePlate: '34 ABC 123', customerId: 1, startDate: '2024-06-20', endDate: '2024-06-25', deliveryLocation: 'Havaalanı', notes: 'Bebek koltuğu talep edildi.', status: 'active' },
];
let maintenanceData = [
    { id: 1, vehiclePlate: '35 DEF 456', maintenanceDate: '2024-05-01', maintenanceKm: 45000, type: 'Periyodik Bakım', cost: 2500, description: 'Yağ ve filtreler değişti. Genel kontrol yapıldı.', nextMaintenanceKm: 60000, nextMaintenanceDate: '2025-05-01' },
];
const getStatusClass = (status) => {
    if (status === 'Müsait' || status === 'completed')
        return 'available';
    if (status === 'Kirada' || status === 'active')
        return 'rented';
    if (status === 'Bakımda')
        return 'maintenance';
    return '';
};
const DashboardPage = () => {
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    const daysUntil = (dateStr) => {
        if (!dateStr)
            return Infinity;
        const today = new Date();
        const targetDate = new Date(dateStr);
        today.setHours(0, 0, 0, 0);
        targetDate.setHours(0, 0, 0, 0);
        const diffTime = targetDate.getTime() - today.getTime();
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    };
    // Calculate dynamic stats
    const totalVehicles = vehiclesData.length;
    const activeRentals = vehiclesData.filter(v => v.status === 'Kirada').length;
    const totalCustomers = customersData.length;
    const maintenanceVehicles = vehiclesData.filter(v => v.status === 'Bakımda').length;
    const monthlyIncome = rentalsData
        .filter(r => {
        if (!r.endDate)
            return false;
        const endDate = new Date(r.endDate);
        return endDate.getMonth() === currentMonth && endDate.getFullYear() === currentYear;
    })
        .reduce((sum, r) => sum + (r.totalCost || 0), 0);
    const allStatCards = [
        { key: 'db_metric_total', id: 'vehicles', label: 'Toplam Araç', value: totalVehicles, icon: 'fa-car', color: 'blue' },
        { key: 'db_metric_rented', id: 'rentals', label: 'Aktif Kiralama', value: activeRentals, icon: 'fa-key', color: 'orange' },
        { key: 'db_metric_maintenance', id: 'maintenance', label: 'Bakımdaki Araçlar', value: maintenanceVehicles, icon: 'fa-screwdriver-wrench', color: 'purple' },
        { key: 'db_metric_income', id: 'invoices', label: 'Bu Ayki Gelir', value: `₺${monthlyIncome.toLocaleString('tr-TR')}`, icon: 'fa-wallet', color: 'red' },
    ];
    // Filter stat cards based on settings
    const statCardsData = allStatCards.filter(card => {
        // This is a trick to use a string key to access a property of the settings object
        const settingsKey = card.key;
        // If the setting exists and is false, filter it out. Otherwise, keep it.
        return state.settings[settingsKey] !== false;
    });
    // Vehicle distribution data
    const availableVehiclesCount = vehiclesData.filter(v => v.status === 'Müsait').length;
    const distributionData = [
        { label: 'Müsait Araçlar', status: 'Müsait', count: availableVehiclesCount, colorClass: 'available', icon: 'fa-check-circle' },
        { label: 'Kiradaki Araçlar', status: 'Kirada', count: activeRentals, colorClass: 'rented', icon: 'fa-key' },
        { label: 'Bakımdaki Araçlar', status: 'Bakımda', count: maintenanceVehicles, colorClass: 'maintenance', icon: 'fa-screwdriver-wrench' },
    ];
    // Calculate upcoming reminders
    const upcomingReminders = [];
    vehiclesData.forEach(v => {
        const insuranceDays = daysUntil(v.insuranceDate);
        if (insuranceDays >= 0 && insuranceDays <= 30) {
            upcomingReminders.push({ type: 'Sigorta', vehiclePlate: v.plate, days: insuranceDays, date: v.insuranceDate });
        }
        const inspectionDays = daysUntil(v.inspectionDate);
        if (inspectionDays >= 0 && inspectionDays <= 30) {
            upcomingReminders.push({ type: 'Muayene', vehiclePlate: v.plate, days: inspectionDays, date: v.inspectionDate });
        }
    });
    maintenanceData.forEach(m => {
        const maintenanceDays = daysUntil(m.nextMaintenanceDate);
        if (maintenanceDays >= 0 && maintenanceDays <= 30) {
            // Check if this is the latest maintenance for the vehicle to avoid duplicates
            const latestMaint = maintenanceData
                .filter(mx => mx.vehiclePlate === m.vehiclePlate)
                .sort((a, b) => new Date(b.maintenanceDate).getTime() - new Date(a.maintenanceDate).getTime())[0];
            if (m.id === latestMaint.id) {
                upcomingReminders.push({ type: 'Bakım', vehiclePlate: m.vehiclePlate, days: maintenanceDays, date: m.nextMaintenanceDate });
            }
        }
    });
    upcomingReminders.sort((a, b) => a.days - b.days);
    const getReminderUrgency = (days) => {
        if (days <= 7)
            return 'urgent';
        if (days <= 15)
            return 'warning';
        return 'normal';
    };
    const getReminderText = (days) => {
        if (days < 0)
            return 'Geçti!';
        if (days === 0)
            return 'Bugün Son Gün!';
        if (days === 1)
            return 'Yarın Son Gün!';
        return `Son ${days} gün`;
    };
    const getReminderIcon = (type) => {
        if (type === 'Sigorta')
            return 'fa-shield-halved';
        if (type === 'Muayene')
            return 'fa-clipboard-check';
        if (type === 'Bakım')
            return 'fa-oil-can';
        return 'fa-bell';
    };
    return `
      <header class="page-header">
        <h1>Ana Gösterge Paneli</h1>
        <p>${new Date().toLocaleDateString('tr-TR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
      </header>
      <section class="stats-grid">
        ${statCardsData.map((stat) => `
          <div class="stat-card" data-page-id="${stat.id}">
            <div class="icon-wrapper ${stat.color}">
              <i class="fa-solid ${stat.icon}"></i>
            </div>
            <div class="info">
              <h3>${stat.value}</h3>
              <p>${stat.label}</p>
            </div>
          </div>
        `).join('')}
      </section>
      <div class="dashboard-grid">
    <section class="reminders-panel">
        <h3>Yaklaşan Hatırlatmalar (${upcomingReminders.length})</h3>
        <ul class="reminders-list">
            ${upcomingReminders.slice(0, 4).map(reminder => `
                <li class="reminder-item ${getReminderUrgency(reminder.days)}">
                    <div class="reminder-icon">
                        <i class="fa-solid ${getReminderIcon(reminder.type)}"></i>
                    </div>
                    <div class="reminder-info">
                        <strong>${reminder.vehiclePlate}</strong>
                        <span>${reminder.type} Bitiş Tarihi</span>
                    </div>
                    <div class="reminder-days">
                        <span>${getReminderText(reminder.days)}</span>
                    </div>
                </li>
            `).join('')}
            ${upcomingReminders.length === 0 ? '<li class="no-data-item">Yaklaşan hatırlatma bulunmuyor.</li>' : ''}
        </ul>
    </section>
    <section class="quick-access-panel">
      <h3>Hızlı İşlemler</h3>
      <div class="quick-access-buttons">
        ${quickAccessItems.map(item => `
          <button class="quick-access-btn ${item.className}" data-tooltip="${item.text}" data-page-id="${item.id}">
            <i class="${item.icon}"></i>
          </button>
        `).join('')}
      </div>
    </section>
    <section class="recent-activities-panel">
      <h3>Son Yapılan İşlemler</h3>
      <ul class="activity-list">
          ${activitiesData.map(activity => `
              <li class="activity-item">
                  <div class="activity-icon">
                      <i class="fa-solid ${activity.icon}"></i>
                  </div>
                  <div class="activity-details">
                      <p>${activity.message}</p>
                      <span>${formatTimeAgo(activity.time)}</span>
                  </div>
              </li>
          `).join('')}
      </ul>
    </section>
    <section class="vehicle-distribution-panel">
      <h3>Filo Durum Dağılımı</h3>
      <ul class="distribution-list-reimagined">
        ${distributionData.map(item => `
          <li class="distribution-item-reimagined dist-item-${item.colorClass}" data-status-filter="${item.status}">
            <div class="dist-item-icon">
              <i class="fa-solid ${item.icon}"></i>
            </div>
            <span class="dist-item-label">${item.label}</span>
            <span class="dist-item-count">${item.count}</span>
          </li>
        `).join('')}
      </ul>
    </section>
      </div>
    `;
};
const VehiclesPage = () => {
    const daysUntil = (dateStr) => {
        if (!dateStr)
            return Infinity;
        const today = new Date();
        const targetDate = new Date(dateStr);
        today.setHours(0, 0, 0, 0);
        targetDate.setHours(0, 0, 0, 0);
        const diffTime = targetDate.getTime() - today.getTime();
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    };
    const reminderDays = state.settings.reminder_days || 30;
    return `
    <header class="page-header">
        <h1>Araç Yönetimi</h1>
        <p>Filodaki tüm araçları görüntüleyin ve yönetin.</p>
    </header>
    <div class="page-actions">
        <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i> 
            <input type="text" id="vehicle-search" placeholder="Plaka veya marka ara..." value="${state.searchTerm}">
        </div>
        <button class="btn btn-secondary ${state.filterExpiring ? 'active' : ''}" id="filter-expiring-btn" title="Sigortası veya Muayenesi Yaklaşan Araçları Göster">
            <i class="fa-solid fa-bell"></i> 
            Yaklaşanlar
        </button>
        <button class="btn btn-primary" id="add-vehicle-btn">
            <i class="fa-solid fa-plus"></i> 
            Yeni Araç Ekle
        </button>
    </div>
    <div class="vehicles-grid">
        ${vehiclesData
        .map((v, index) => ({ ...v, originalIndex: index })) // Keep original index
        .filter(v => {
        if (!state.filterExpiring)
            return true;
        const insuranceDays = daysUntil(v.insuranceDate);
        const inspectionDays = daysUntil(v.inspectionDate);
        return (insuranceDays >= 0 && insuranceDays <= reminderDays) || (inspectionDays >= 0 && inspectionDays <= reminderDays);
    })
        .filter(v => !state.vehicleStatusFilter || // If no filter, show all
        v.status === state.vehicleStatusFilter)
        .filter(v => v.plate.toLowerCase().includes(state.searchTerm.toLowerCase()) ||
        v.brand.toLowerCase().includes(state.searchTerm.toLowerCase()))
        .map(v => `
            <div class="vehicle-card" data-vehicle-index="${v.originalIndex}" data-status="${v.status}">
                <div class="card-header">
                    <h3>${v.plate}</h3>
                    <div class="status-badge ${getStatusClass(v.status)}">${v.status}</div>
                </div>
                <div class="card-info">
                    <p>${v.brand}</p>
                    <span>${v.km} KM</span>
                </div>
                <div class="card-documents">
                    <h4>Belgeler</h4>
                     <div class="document-item">
                        <div class="document-info">
                            <i class="fa-solid fa-shield-halved"></i>
                            <div><span>Sigorta Bitiş</span><strong>${v.insuranceDate ? new Date(v.insuranceDate).toLocaleDateString('tr-TR') : 'Girilmemiş'}</strong></div>
                        </div>
                        ${v.insuranceFile ?
        (v.insuranceFileUrl ? `<a href="${v.insuranceFileUrl}" target="_blank" class="btn-view" title="${v.insuranceFile}"><i class="fa-solid fa-eye"></i> Görüntüle</a>` : `<button class="btn-upload btn-edit-vehicle" title="Dosyayı yeniden yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yeniden Yükle</button>`) :
        `<button class="btn-upload btn-edit-vehicle" title="Dosya yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yükle</button>`}
                    </div>
                    <div class="document-item">
                        <div class="document-info">
                            <i class="fa-solid fa-clipboard-check"></i>
                            <div><span>Muayene Bitiş</span><strong>${v.inspectionDate ? new Date(v.inspectionDate).toLocaleDateString('tr-TR') : 'Girilmemiş'}</strong></div>
                        </div>
                         ${v.inspectionFile ?
        (v.inspectionFileUrl ? `<a href="${v.inspectionFileUrl}" target="_blank" class="btn-view" title="${v.inspectionFile}"><i class="fa-solid fa-eye"></i> Görüntüle</a>` : `<button class="btn-upload btn-edit-vehicle" title="Dosyayı yeniden yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yeniden Yükle</button>`) :
        `<button class="btn-upload btn-edit-vehicle" title="Dosya yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yükle</button>`}
                    </div>
                    <div class="document-item">
                        <div class="document-info"><i class="fa-solid fa-id-card"></i><span>Ruhsat</span></div>
                         ${v.licenseFile ?
        (v.licenseFileUrl ? `<a href="${v.licenseFileUrl}" target="_blank" class="btn-view" title="${v.licenseFile}"><i class="fa-solid fa-eye"></i> Görüntüle</a>` : `<button class="btn-upload btn-edit-vehicle" title="Dosyayı yeniden yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yeniden Yükle</button>`) :
        `<button class="btn-upload btn-edit-vehicle" title="Dosya yüklemek için düzenleyin"><i class="fa-solid fa-upload"></i> Yükle</button>`}
                    </div>
                </div>
                <div class="card-actions">
                    ${v.status === 'Müsait' ? `<button class="btn btn-rent"><i class="fa-solid fa-key"></i> Kirala</button>` : ''}
                    ${v.status === 'Kirada' ? `<button class="btn btn-check-in"><i class="fa-solid fa-right-to-bracket"></i> Teslim Al</button>` : ''}
                    <div class="action-icons">
                       <button class="action-btn btn-view-maintenance" title="Bakım Geçmişini Görüntüle"><i class="fa-solid fa-screwdriver-wrench"></i></button>
                       <button class="action-btn btn-edit-vehicle" title="Düzenle"><i class="fa-solid fa-pencil"></i></button>
                       <button class="action-btn btn-delete-vehicle" title="Sil"><i class="fa-solid fa-trash-can"></i></button>
                    </div>
                </div>
            </div>
        `).join('')}
    </div>
    `;
};
const CustomersPage = () => {
    return `
    <header class="page-header">
        <h1>Müşteri Yönetimi</h1>
        <p>Tüm müşterilerinizi görüntüleyin ve yönetin.</p>
    </header>
    <div class="page-actions">
        <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i> 
            <input type="text" id="customer-search" placeholder="Müşteri adı, TC veya telefon ara..." value="${state.searchTerm}">
        </div>
        <button class="btn btn-primary" id="add-customer-btn">
            <i class="fa-solid fa-user-plus"></i> 
            Yeni Müşteri Ekle
        </button>
    </div>
    <div class="customer-list">
        ${customersData
        .map((c, index) => ({ ...c, originalIndex: index }))
        .filter(c => c.name.toLowerCase().includes(state.searchTerm.toLowerCase()) ||
        c.tc.includes(state.searchTerm) ||
        c.phone.includes(state.searchTerm)).map((customer) => {
        const totalRentals = customer.rentals.length;
        const hasActiveRental = customer.rentals.some(r => r.status === 'Aktif');
        const initials = customer.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();
        return `
            <div class="customer-accordion" data-customer-index="${customer.originalIndex}">
                <button class="accordion-header">
                    <div class="customer-card-top">
                        <div class="customer-avatar">${initials}</div>
                        <div class="customer-summary">
                            <span class="customer-name">${customer.name}</span>
                            <span class="customer-phone">${customer.phone}</span>
                        </div>
                        <i class="fa-solid fa-chevron-down accordion-arrow"></i>
                    </div>
                    <div class="customer-card-stats">
                        <div class="stat-item">
                            <i class="fa-solid fa-file-contract"></i>
                            <span>${totalRentals} Kiralama</span>
                        </div>
                        <div class="stat-item ${hasActiveRental ? 'active-rental' : 'no-active-rental'}">
                            <i class="fa-solid ${hasActiveRental ? 'fa-key' : 'fa-check'}"></i>
                            <span>${hasActiveRental ? 'Aktif Kiralaması Var' : 'Aktif Kiralaması Yok'}</span>
                        </div>
                    </div>
                </button>
                <div class="accordion-content">
                    <div class="customer-details-grid">
                        <div class="detail-item"><strong>TC Kimlik No:</strong><span>${customer.tc}</span></div>
                        <div class="detail-item"><strong>Email:</strong><span>${customer.email || '-'}</span></div>
                        <div class="detail-item"><strong>Ehliyet No:</strong><span>${customer.licenseNumber || '-'}</span></div>
                        <div class="detail-item"><strong>Ehliyet Tarihi:</strong><span>${customer.licenseDate || '-'}</span></div>
                        <div class="detail-item full-width"><strong>Adres:</strong><span>${customer.address || '-'}</span></div>
                    </div>
                    
                    <div class="accordion-section">
                        <div class="accordion-section-header">
                            <h4>Belgeler</h4>
                        </div>
                        <div class="card-documents">
                            <div class="document-item">
                                <div class="document-info"><i class="fa-solid fa-id-card"></i><span>Kimlik</span></div>
                                ${customer.idFile ?
            `<a href="${customer.idFileUrl || '#'}" target="_blank" class="btn-view" title="${customer.idFile}"><i class="fa-solid fa-eye"></i> Görüntüle</a>` :
            `<button class="btn-upload btn-edit-customer"><i class="fa-solid fa-upload"></i> Yükle</button>`}
                            </div>
                            <div class="document-item">
                                <div class="document-info"><i class="fa-solid fa-id-card-clip"></i><span>Ehliyet</span></div>
                                ${customer.licenseFile ?
            `<a href="${customer.licenseFileUrl || '#'}" target="_blank" class="btn-view" title="${customer.licenseFile}"><i class="fa-solid fa-eye"></i> Görüntüle</a>` :
            `<button class="btn-upload btn-edit-customer"><i class="fa-solid fa-upload"></i> Yükle</button>`}
                            </div>
                        </div>
                    </div>

                    <div class="accordion-section">
                        <div class="accordion-section-header">
                            <h4>Kiralama Geçmişi</h4>
                        </div>
                        ${customer.rentals.length > 0 ? `
                            <table class="rental-history-table">
                                <thead>
                                    <tr>
                                        <th>Plaka</th>
                                        <th>Tarih Aralığı</th>
                                        <th>Durum</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${customer.rentals.map(rental => `
                                        <tr>
                                            <td>${rental.plate}</td>
                                            <td>${rental.date}</td>
                                            <td><span class="status-badge ${rental.status === 'Tamamlandı' ? 'available' : 'rented'}">${rental.status}</span></td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p class="no-history">Bu müşterinin kiralama geçmişi bulunmuyor.</p>'}
                    </div>
                    <div class="accordion-section accordion-footer-actions">
                        <button class="btn btn-secondary btn-edit-customer">
                            <i class="fa-solid fa-user-pen"></i> Müşteriyi Düzenle
                        </button>
                        <button class="btn btn-danger btn-delete-customer">
                            <i class="fa-solid fa-user-slash"></i> Müşteriyi Sil
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('')}
    </div>
    `;
};
const ReservationsPage = () => {
    const getCustomerName = (customerId) => {
        const customer = customersData.find(c => c.id === customerId);
        return customer ? customer.name : 'Bilinmeyen Müşteri';
    };
    const getVehicleBrand = (plate) => {
        const vehicle = vehiclesData.find(v => v.plate === plate);
        return vehicle ? vehicle.brand : 'Bilinmeyen Araç';
    };
    const formatDate = (dateString) => new Date(dateString).toLocaleDateString('tr-TR');
    return `
    <header class="page-header">
        <h1>Rezervasyon Yönetimi</h1>
        <p>Gelecek ve geçmiş tüm rezervasyonları görüntüleyin.</p>
    </header>
    <div class="page-actions">
        <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i> 
            <input type="text" id="reservation-search" placeholder="Plaka veya müşteri adı ara..." value="${state.searchTerm}">
        </div>
        <button class="btn btn-primary" id="add-reservation-btn">
            <i class="fa-solid fa-calendar-plus"></i> 
            Yeni Rezervasyon Ekle
        </button>
    </div>
    <div class="reservations-list">
        ${reservationsData.map(res => `
            <div class="reservation-card" data-reservation-id="${res.id}">
                <div class="reservation-card-header">
                    <div class="reservation-vehicle">
                        <i class="fa-solid fa-car"></i>
                        <div>
                            <strong>${res.vehiclePlate}</strong>
                            <span>${getVehicleBrand(res.vehiclePlate)}</span>
                        </div>
                    </div>
                    <div class="status-badge ${getStatusClass(res.status)}">${res.status}</div>
                </div>
                <div class="reservation-card-body">
                    <div class="reservation-customer">
                        <i class="fa-solid fa-user"></i>
                        <span>${getCustomerName(res.customerId)}</span>
                    </div>
                    <div class="reservation-details">
                        <div class="detail-item">
                            <i class="fa-solid fa-calendar-arrow-down"></i>
                            <span>${formatDate(res.startDate)}</span>
                        </div>
                        <i class="fa-solid fa-arrow-right-long"></i>
                        <div class="detail-item">
                            <i class="fa-solid fa-calendar-arrow-up"></i>
                            <span>${formatDate(res.endDate)}</span>
                        </div>
                    </div>
                </div>
                <div class="reservation-card-footer">
                    <div class="delivery-location">
                        <i class="fa-solid fa-map-location-dot"></i>
                        <span>Teslim Yeri: <strong>${res.deliveryLocation}</strong></span>
                    </div>
                    ${res.notes ? `<div class="reservation-notes" data-tooltip="${res.notes}"><i class="fa-solid fa-comment-dots"></i> Not Var</div>` : ''}
                </div>
                <div class="card-actions">
                    <div class="action-icons">
                        <button class="action-btn btn-edit-reservation" title="Düzenle"><i class="fa-solid fa-pencil"></i></button>
                        <button class="action-btn btn-delete-reservation" title="Sil"><i class="fa-solid fa-trash-can"></i></button>
                    </div>
                </div>
            </div>
        `).join('')}
    </div>
    `;
};
const MaintenancePage = () => {
    const formatDate = (dateString) => new Date(dateString).toLocaleDateString('tr-TR');
    const formatKm = (km) => km.toLocaleString('tr-TR') + ' KM';
    return `
    <header class="page-header">
        ${state.searchTerm ? `<div class="filter-indicator">
            <i class="fa-solid fa-filter"></i> <span>Filtreleniyor: <strong>${state.searchTerm}</strong></span>
            <button id="clear-maintenance-filter" title="Filtreyi Temizle"><i class="fa-solid fa-xmark"></i></button>
        </div>` : ''}
        <h1>Bakım Geçmişi</h1>
        <p>Araçların bakım kayıtlarını yönetin.</p>
    </header>
    <div class="page-actions">
        <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i> 
            <input type="text" id="maintenance-search" placeholder="Plaka veya bakım tipi ara..." value="${state.searchTerm}">
        </div>
        <button class="btn btn-primary" id="add-maintenance-btn">
            <i class="fa-solid fa-oil-can"></i> 
            Yeni Bakım Kaydı
        </button>
    </div>
    <div class="maintenance-list">
        ${maintenanceData
        .filter(m => !state.searchTerm ||
        m.vehiclePlate.toLowerCase().includes(state.searchTerm.toLowerCase())).map(maint => `
            <div class="maintenance-card" data-maintenance-id="${maint.id}">
                <div class="maintenance-card-header">
                    <h3>${maint.vehiclePlate}</h3>
                    <div class="action-icons">
                        <button class="action-btn btn-edit-maintenance" title="Düzenle"><i class="fa-solid fa-pencil"></i></button>
                        <button class="action-btn btn-delete-maintenance" title="Sil"><i class="fa-solid fa-trash-can"></i></button>
                    </div>
                </div>
                <div class="maintenance-card-body">
                    <div class="maintenance-section">
                        <h4>Yapılan Bakım</h4>
                        <div class="maintenance-detail"><strong>Tarih:</strong><span>${formatDate(maint.maintenanceDate)}</span></div>
                        <div class="maintenance-detail"><strong>Kilometre:</strong><span>${formatKm(maint.maintenanceKm)}</span></div>
                        <div class="maintenance-detail"><strong>Tür:</strong><span>${maint.type}</span></div>
                        <div class="maintenance-detail"><strong>Maliyet:</strong><span>₺${maint.cost.toLocaleString('tr-TR')}</span></div>
                        <p class="maintenance-description">${maint.description}</p>
                    </div>
                    <div class="maintenance-section next-due">
                        <h4>Sonraki Bakım</h4>
                        <div class="maintenance-detail">
                            <i class="fa-solid fa-road"></i>
                            <span>${formatKm(maint.nextMaintenanceKm)}</span>
                        </div>
                        <div class="maintenance-detail">
                            <i class="fa-solid fa-calendar-alt"></i>
                            <span>${formatDate(maint.nextMaintenanceDate)}</span>
                        </div>
                    </div>
                </div>
            </div>
        `).join('')}
        ${maintenanceData.length === 0 ? '<p class="no-data-item">Henüz bakım kaydı bulunmuyor.</p>' : ''}
    </div>
    `;
};
const SettingsPage = () => {
    const createSettingCard = (title, content) => `
      <div class="setting-content-card">
          <h4>${title}</h4>
          ${content}
      </div>
  `;
    const createCheckbox = (id, label, checked = true) => `
      <div class="setting-checkbox">
          <input type="checkbox" id="${id}" data-setting-key="${id}" ${checked ? 'checked' : ''}>
          <label for="${id}">${label}</label>
      </div>
  `;
    const createColorTag = (label, colorVar) => `
      <div class="setting-color-tag">
          <span class="color-swatch" style="background-color: var(${colorVar})"></span>
          ${label}
      </div>
  `;
    const sections = [
        {
            icon: 'fa-chart-pie',
            title: 'Gösterge Paneli',
            content: `
              ${createSettingCard('Metrik Görünürlüğü', `
                  ${createCheckbox('db_metric_total', 'Toplam Araç Kartı', state.settings.db_metric_total)}
                  ${createCheckbox('db_metric_rented', 'Aktif Kiralama Kartı', state.settings.db_metric_rented)}
                  ${createCheckbox('db_metric_maintenance', 'Bakımdaki Araçlar Kartı', state.settings.db_metric_maintenance)}
                  ${createCheckbox('db_metric_income', 'Aylık Gelir Kartı', state.settings.db_metric_income)}
              `)}
              ${createSettingCard('Panel Görünürlüğü', `
                  <p class="setting-description">Ana sayfadaki panellerin görünürlüğünü yönetin.</p>
                  ${createCheckbox('db_panel_reminders', 'Yaklaşan Hatırlatmalar Paneli')}
                  ${createCheckbox('db_panel_quick_access', 'Hızlı İşlemler Paneli')}
                  ${createCheckbox('db_panel_activities', 'Son İşlemler Paneli')}
                  ${createCheckbox('db_panel_distribution', 'Filo Durum Dağılımı Paneli')}
              `)}
          `
        },
        {
            icon: 'fa-car',
            title: 'Araç ve Hatırlatmalar',
            content: `
              ${createSettingCard('Hatırlatma Süresi', `
                  <p class="setting-description">Sigorta ve muayene gibi uyarıların kaç gün önceden gösterileceğini belirleyin.</p>
                  <input type="number" class="setting-input" data-setting-key="reminder_days" value="${state.settings.reminder_days}">
              `)}
              ${createSettingCard('Araç Kartı Butonları', `
                  <p class="setting-description">Araçlar sayfasındaki kartlarda görünecek işlem butonlarını seçin.</p>
                  ${createCheckbox('vehicle_btn_rent', 'Kirala Butonu', state.settings.vehicle_btn_rent)}
                  ${createCheckbox('vehicle_btn_checkin', 'Teslim Al Butonu', state.settings.vehicle_btn_checkin)}
                  ${createCheckbox('vehicle_btn_edit', 'Düzenle Butonu', state.settings.vehicle_btn_edit)}
              `)}
          `
        },
        {
            icon: 'fa-bell',
            title: 'Bildirimler',
            content: `
              ${createSettingCard('Bildirim Türleri', `
                  <p class="setting-description">Hangi durumlarda bildirim almak istediğinizi seçin.</p>
                  ${createCheckbox('notif_type_insurance', 'Sigorta Bitiş Uyarısı', state.settings.notif_type_insurance)}
                  ${createCheckbox('notif_type_inspection', 'Muayene Bitiş Uyarısı', state.settings.notif_type_inspection)}
                  ${createCheckbox('notif_type_activity', 'Yeni Sistem Aktiviteleri', state.settings.notif_type_activity)}
              `)}
          `
        },
        {
            icon: 'fa-solid fa-file-invoice',
            title: 'PDF & Rapor Ayarları',
            content: `
              ${createSettingCard('Şirket Bilgileri', `
                  <p class="setting-description">Raporlarda görünecek şirket bilgilerini buradan düzenleyebilirsiniz.</p>
                  <div class="form-group" style="margin-bottom: 12px;"><label>Şirket Ünvanı</label><input type="text" class="setting-input" data-company-key="name" value="${state.settings.companyInfo.name}"></div>
                  <div class="form-group" style="margin-bottom: 12px;"><label>Adres</label><input type="text" class="setting-input" data-company-key="address" value="${state.settings.companyInfo.address}"></div>
                  <div class="form-row" style="margin-bottom: 12px;">
                      <div class="form-group"><label>Telefon</label><input type="text" class="setting-input" data-company-key="phone" value="${state.settings.companyInfo.phone}"></div>
                      <div class="form-group"><label>E-posta</label><input type="email" class="setting-input" data-company-key="email" value="${state.settings.companyInfo.email}"></div>
                  </div>
                  <div class="form-group"><label>IBAN / Hesap Bilgileri</label><input type="text" class="setting-input" data-company-key="iban" value="${state.settings.companyInfo.iban}"></div>
              `)}
              ${createSettingCard('Logo ve Görünüm', `
                  <div class="file-upload-group" style="padding:0; border:0; background: transparent;">
                      <div class="file-input-wrapper">
                          <span><i class="fa-solid fa-image"></i> Logo Yükle (PNG/JPG)</span>
                          <input type="file" id="companyLogoFile" accept=".png,.jpg,.jpeg">
                      </div>
                      ${state.settings.companyInfo.logo ? `
                        <div class="logo-preview-container">
                            <img src="${state.settings.companyInfo.logo}" alt="Logo Önizleme" class="logo-preview-img"/>
                            <button id="remove-logo-btn" class="btn-remove-logo" title="Logoyu Kaldır"><i class="fa-solid fa-trash"></i></button>
                        </div>
                      ` : ''}
                  </div>
                  <hr>
                  <div class="file-upload-group" style="padding:0; border:0; background: transparent;">
                      <div class="file-input-wrapper">
                          <span><i class="fa-solid fa-image"></i> PDF Arka Planı (PNG/JPG)</span>
                          <input type="file" id="companyPdfBackgroundFile" accept=".png,.jpg,.jpeg">
                      </div>
                      ${state.settings.companyInfo.pdfBackground ? `
                        <div class="logo-preview-container">
                            <img src="${state.settings.companyInfo.pdfBackground}" alt="Arka Plan Önizleme" class="logo-preview-img"/>
                            <button id="remove-pdf-background-btn" class="btn-remove-logo" title="Arka Planı Kaldır"><i class="fa-solid fa-trash"></i></button>
                        </div>
                      ` : ''}
                  </div>
                  ${createCheckbox('pdf_show_logo', 'Logoyu Raporlarda Göster', state.settings.pdfSettings.showLogo)}
                  ${createCheckbox('pdf_show_background', 'Arka Planı Raporlarda Göster', state.settings.pdfSettings.showBackground)}
                  ${createCheckbox('pdf_show_footer', 'Alt Bilgiyi (Adres, Tel vb.) Göster', state.settings.pdfSettings.showFooter)}
              `)}
          `
        },
        {
            icon: 'fa-palette',
            title: 'Görünüm ve Tema',
            content: `
              <div class="setting-card">
                  <div class="setting-info">
                      <h3>Karanlık Mod</h3>
                      <p>Uygulama arayüzünü açık veya koyu tema arasında değiştirin.</p>
                  </div>
                  <div class="theme-switcher">
                      <i class="fa-solid fa-sun"></i>
                      <label class="switch">
                          <input type="checkbox" id="theme-toggle" ${state.theme === 'dark' ? 'checked' : ''} />
                          <span class="slider round"></span>
                      </label>
                      <i class="fa-solid fa-moon"></i>
                  </div>
              </div>
          `
        },
        {
            icon: 'fa-solid fa-database',
            title: 'Yedekleme ve Geri Yükleme',
            content: `
              ${createSettingCard('Veri Yönetimi', `
                  <p class="setting-description">Uygulama verilerinizi (araçlar, müşteriler, kiralamalar vb.) bir JSON dosyası olarak yedekleyin veya daha önce aldığınız bir yedeği geri yükleyin.</p>
                  <div class="backup-restore-buttons">
                      <button class="btn btn-secondary" id="btn-export-data"><i class="fa-solid fa-download"></i> Verileri Dışa Aktar</button>
                      <button class="btn btn-secondary" id="btn-import-data"><i class="fa-solid fa-upload"></i> Verileri İçe Aktar</button>
                      <input type="file" id="import-file-input" accept=".json" style="display: none;">
                  </div>
              `)}
          `
        }
    ];
    const accordionsHTML = sections.map(section => `
      <div class="settings-accordion">
          <button class="settings-accordion-header">
              <div class="accordion-title">
                  <i class="fa-solid ${section.icon}"></i>
                  <span>${section.title}</span>
              </div>
              <i class="fa-solid fa-chevron-right accordion-arrow"></i>
          </button>
          <div class="settings-accordion-content">
              <div class="accordion-content-inner">
                  ${section.content}
              </div>
          </div>
      </div>
  `).join('');
    return `
      <header class="page-header">
          <h1>Ayarlar</h1>
          <p>Uygulama genelindeki tercihlerinizi ve görünümleri yönetin.</p>
      </header>
      <div class="settings-body">
          ${accordionsHTML}
      </div>
      <div class="settings-footer">
          <button class="btn-gradient-reset" disabled>Sıfırla</button>
          <button class="btn-gradient-save">Değişiklikleri Kaydet</button>
      </div>
  `;
};
const NotificationsPage = () => {
    const allNotifications = [];
    const now = new Date();
    now.setHours(0, 0, 0, 0);
    const daysUntil = (dateStr) => {
        if (!dateStr)
            return Infinity;
        const targetDate = new Date(dateStr);
        targetDate.setHours(0, 0, 0, 0);
        const diffTime = targetDate.getTime() - now.getTime();
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    };
    const getReminderText = (days) => {
        if (days < 0)
            return 'Geçti!';
        if (days === 0)
            return 'Bugün Son Gün!';
        if (days === 1)
            return 'Yarın Son Gün!';
        return `Son ${days} gün`;
    };
    // 1. Hatırlatmaları ekle
    vehiclesData.forEach((v, index) => {
        const insuranceDays = daysUntil(v.insuranceDate);
        if (insuranceDays >= 0 && insuranceDays <= 30) {
            allNotifications.push({ type: 'reminder', urgency: insuranceDays <= 7 ? 'urgent' : 'warning', icon: 'fa-shield-halved', message: `<strong>${v.plate}</strong> plakalı aracın sigortası yaklaşıyor.`, time: new Date(v.insuranceDate), daysText: getReminderText(insuranceDays), vehicleIndex: index });
        }
        const inspectionDays = daysUntil(v.inspectionDate);
        if (inspectionDays >= 0 && inspectionDays <= 30) {
            allNotifications.push({ type: 'reminder', urgency: inspectionDays <= 7 ? 'urgent' : 'warning', icon: 'fa-clipboard-check', message: `<strong>${v.plate}</strong> plakalı aracın muayenesi yaklaşıyor.`, time: new Date(v.inspectionDate), daysText: getReminderText(inspectionDays), vehicleIndex: index });
        }
    });
    maintenanceData.forEach(m => {
        const maintenanceDays = daysUntil(m.nextMaintenanceDate);
        if (maintenanceDays >= 0 && maintenanceDays <= 30) {
            const vehicleIndex = vehiclesData.findIndex(v => v.plate === m.vehiclePlate);
            allNotifications.push({ type: 'reminder', urgency: maintenanceDays <= 7 ? 'urgent' : 'warning', icon: 'fa-oil-can', message: `<strong>${m.vehiclePlate}</strong> plakalı aracın periyodik bakımı yaklaşıyor.`, time: new Date(m.nextMaintenanceDate), daysText: getReminderText(maintenanceDays), vehicleIndex });
        }
    });
    // 2. Son aktiviteleri ekle
    activitiesData.forEach(activity => {
        allNotifications.push({ type: 'activity', urgency: 'normal', icon: activity.icon, message: activity.message, time: activity.time });
    });
    // 3. Hepsini tarihe göre sırala
    allNotifications.sort((a, b) => b.time.getTime() - a.time.getTime());
    const renderNotificationCard = (notification) => {
        const timeAgo = formatTimeAgo(notification.time);
        const isClickable = notification.type === 'reminder' && notification.vehicleIndex !== undefined && notification.vehicleIndex !== null;
        return `
            <div class="notification-card ${notification.urgency} ${isClickable ? 'clickable' : ''}" 
                 data-notification-id="${notification.time.getTime()}" 
                 ${isClickable ? `data-vehicle-index="${notification.vehicleIndex}"` : ''}>
                <div class="notification-icon">
                    <i class="fa-solid ${notification.icon}"></i>
                </div>
                <div class="notification-content">
                    <p class="notification-message">${notification.message}</p>
                    <span class="notification-time">${timeAgo}</span>
                </div>
                ${notification.type === 'reminder' ? `<div class="notification-extra">${notification.daysText}</div>` : ''}
            </div>
        `;
    };
    return `
        <header class="page-header">
        <h1>Bildirimler</h1>
        <p>Uygulamadaki tüm önemli güncellemeler ve hatırlatmalar.</p>
        </header>
        <div class="notifications-container">
            ${allNotifications.length > 0 ? allNotifications.map(renderNotificationCard).join('') : '<p class="no-data-item">Gösterilecek bildirim yok.</p>'}
        </div>
    `;
};
const RentalsPage = () => {
    const getCustomerName = (customerId) => {
        const customer = customersData.find(c => c.id === customerId);
        return customer ? customer.name : 'Bilinmeyen Müşteri';
    };
    const formatDate = (dateString) => {
        if (!dateString)
            return '...';
        return new Date(dateString).toLocaleDateString('tr-TR');
    };
    return `
    <header class="page-header">
        <h1>Kiralama Geçmişi</h1>
        <p>Tüm aktif ve tamamlanmış kiralamaları görüntüleyin.</p>
    </header>
    <div class="page-actions">
        <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i> 
            <input type="text" id="rental-search" placeholder="Plaka veya müşteri adı ara..." value="${state.searchTerm}">
        </div>
    </div>
    <div class="rentals-list">
        ${rentalsData
        .map(rental => {
        const customerName = getCustomerName(rental.customerId);
        return { ...rental, customerName };
    })
        .filter(rental => rental.vehiclePlate.toLowerCase().includes(state.searchTerm.toLowerCase()) ||
        rental.customerName.toLowerCase().includes(state.searchTerm.toLowerCase()))
        .map(rental => `
            <div class="rental-card" data-rental-id="${rental.id}" data-status="${rental.status}">
                <div class="rental-card-header">
                    <div class="rental-card-title">
                        <h3>${rental.vehiclePlate}</h3>
                        <span>- ${rental.customerName}</span>
                    </div>
                    <div class="status-badge ${getStatusClass(rental.status)}">
                        ${rental.status === 'active' ? 'Aktif' : 'Tamamlandı'}
                    </div>
                </div>
                <div class="rental-card-body">
                    <div class="rental-info-item">
                        <strong>Başlangıç:</strong>
                        <span>${formatDate(rental.startDate)}</span>
                    </div>
                    <div class="rental-info-item">
                        <strong>Bitiş:</strong>
                        <span>${formatDate(rental.endDate)}</span>
                    </div>
                    <div class="rental-info-item">
                        <strong>Başlangıç KM:</strong>
                        <span>${rental.startKm.toLocaleString('tr-TR')}</span>
                    </div>
                    <div class="rental-info-item">
                        <strong>Bitiş KM:</strong>
                        <span>${rental.endKm ? rental.endKm.toLocaleString('tr-TR') : '...'}</span>
                    </div>
                    <div class="rental-info-item">
                        <strong>Toplam Ücret:</strong>
                        <span>${rental.totalCost ? `₺${rental.totalCost.toLocaleString('tr-TR')}` : '...'}</span>
                    </div>
                </div>
                <div class="rental-card-footer">
                    <div class="document-buttons">
                        ${rental.contractFile ?
        `<button data-action="view-doc" data-doc-url="${rental.contractFileUrl}" class="btn-icon" title="Sözleşmeyi Görüntüle"><i class="fa-solid fa-file-contract"></i></button>` :
        `<button data-action="upload-doc" class="btn-icon" title="Sözleşme Yükle"><i class="fa-solid fa-upload"></i></button>`}
                        ${rental.invoiceFile ?
        `<button data-action="view-doc" data-doc-url="${rental.invoiceFileUrl}" class="btn-icon" title="Faturayı Görüntüle"><i class="fa-solid fa-file-invoice-dollar"></i></button>` :
        `<button data-action="upload-doc" class="btn-icon" title="Fatura Yükle"><i class="fa-solid fa-upload"></i></button>`}
                    </div>
                    <div class="action-icons">
                        <button data-action="edit-rental" class="action-btn" title="Düzenle"><i class="fa-solid fa-pencil"></i></button>
                        <button data-action="delete-rental" class="action-btn" title="Sil"><i class="fa-solid fa-trash-can"></i></button>
                    </div>
                </div>
            </div>
        `).join('')}
        ${rentalsData.length === 0 ? '<p class="no-data-item">Henüz kiralama kaydı bulunmuyor.</p>' : ''}
    </div>
    `;
};
const ReportsPage = () => {
    const getCustomerName = (customerId) => {
        const customer = customersData.find(c => c.id === customerId);
        return customer ? customer.name : 'Bilinmeyen';
    };
    const formatDate = (dateString) => {
        if (!dateString)
            return '...';
        return new Date(dateString).toLocaleDateString('tr-TR');
    };
    return `
    <header class="page-header">
        <h1>Rapor Oluşturma</h1>
        <p>Belirli kayıtlar için özet raporlar ve belgeler oluşturun.</p>
    </header>
    <div class="reports-container">
        <div class="report-generator-card">
            <div class="report-generator-header">
                <div class="report-icon-wrapper">
                    <i class="fa-solid fa-file-invoice-dollar"></i>
                </div>
                <div class="report-title">
                    <h3>Kiralama Özeti Raporu</h3>
                    <p>Tamamlanmış veya aktif bir kiralama için PDF özeti oluşturun.</p>
                </div>
            </div>
            <div class="report-generator-body">
                <div class="report-controls">
                    <select id="report-rental-select" class="custom-select">
                        <option value="">-- Kiralama Kaydı Seçin --</option>
                        ${rentalsData.sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime()).map(rental => `
                            <option value="${rental.id}">
                                ${rental.vehiclePlate} | ${getCustomerName(rental.customerId)} | ${formatDate(rental.startDate)}
                            </option>
                        `).join('')}
                    </select>
                    <button id="generate-report-btn" class="btn-gradient-generate" disabled>
                        <i class="fa-solid fa-file-arrow-down"></i>
                        <span>PDF Oluştur</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    `;
};
const PlaceholderPage = (pageName, icon) => {
    return `
    <div class="placeholder-page">
        <i class="fa-solid ${icon}"></i>
        <h1>${pageName}</h1>
        <p>Bu sayfa yapım aşamasındadır. Çok yakında...</p>
    </div>
    `;
};
const VehicleModal = () => {
    const isEditing = state.editingVehicleIndex !== null;
    const vehicle = isEditing ? vehiclesData[state.editingVehicleIndex] : null;
    const modelParts = vehicle?.brand.split(' ') || ['', ''];
    const brand = modelParts[0];
    const model = modelParts.slice(1).join(' ');
    return `
    <div class="modal-overlay" id="vehicle-modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2>${isEditing ? 'Aracı Düzenle' : 'Yeni Araç Ekle'}</h2>
                <button class="close-modal-btn" data-modal-id="vehicle-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="vehicle-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="plate">Plaka</label>
                        <input type="text" id="plate" name="plate" placeholder="34 ABC 123" value="${vehicle?.plate || ''}" required ${isEditing ? 'readonly' : ''} oninput="this.value = this.value.toUpperCase()">
                    </div>
                    <div class="form-group">
                        <label for="km">Kilometre</label>
                        <input type="number" id="km" name="km" placeholder="Örn: 85000" value="${vehicle?.km.replace(/,/, '') || ''}" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="brand">Marka</label>
                        <input type="text" id="brand" name="brand" placeholder="Ford" value="${brand || ''}" required>
                    </div>
                    <div class="form-group">
                        <label for="model">Model</label>
                        <input type="text" id="model" name="model" placeholder="Focus" value="${model || ''}" required>
                    </div>
                </div>
                 <div class="form-group">
                    <label for="status">Durum</label>
                    <select id="status" name="status" value="${vehicle?.status || 'Müsait'}">
                        <option value="Müsait" ${vehicle?.status === 'Müsait' ? 'selected' : ''}>Müsait</option>
                        <option value="Kirada" ${vehicle?.status === 'Kirada' ? 'selected' : ''}>Kirada</option>
                        <option value="Bakımda" ${vehicle?.status === 'Bakımda' ? 'selected' : ''}>Bakımda</option>
                    </select>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="insuranceDate">Sigorta Bitiş Tarihi</label>
                        <input type="date" id="insuranceDate" name="insuranceDate" value="${vehicle?.insuranceDate || ''}">
                    </div>
                    <div class="form-group">
                        <label for="inspectionDate">Muayene Bitiş Tarihi</label>
                        <input type="date" id="inspectionDate" name="inspectionDate" value="${vehicle?.inspectionDate || ''}">
                    </div>
                </div>
                <div class="file-upload-group">
                    <label>Belge Yükleme</label>
                    <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-shield-halved"></i> Sigorta</span>
                         <input type="file" id="insuranceFile" name="insuranceFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                     <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-clipboard-check"></i> Muayene</span>
                         <input type="file" id="inspectionFile" name="inspectionFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                     <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-id-card"></i> Ruhsat</span>
                         <input type="file" id="licenseFile" name="licenseFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="vehicle-modal">İptal</button>
                <button type="submit" form="vehicle-form" class="btn btn-primary">${isEditing ? 'Değişiklikleri Kaydet' : 'Aracı Kaydet'}</button>
            </div>
        </div>
    </div>
`;
};
const CustomerModal = () => {
    const isEditing = state.editingCustomerIndex !== null;
    const customer = isEditing ? customersData[state.editingCustomerIndex] : null;
    return `
    <div class="modal-overlay" id="customer-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>${isEditing ? 'Müşteriyi Düzenle' : 'Yeni Müşteri Ekle'}</h2>
                <button class="close-modal-btn" data-modal-id="customer-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="customer-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="customer-name">Ad Soyad</label>
                        <input type="text" id="customer-name" name="name" value="${customer?.name || ''}" required>
                    </div>
                    <div class="form-group">
                        <label for="customer-tc">TC Kimlik No</label>
                        <input type="text" id="customer-tc" name="tc" value="${customer?.tc || ''}" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="customer-phone">Telefon</label>
                        <input type="tel" id="customer-phone" name="phone" value="${customer?.phone || ''}" required>
                    </div>
                    <div class="form-group">
                        <label for="customer-email">Email</label>
                        <input type="email" id="customer-email" name="email" value="${customer?.email || ''}">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="customer-license-number">Ehliyet No</label>
                        <input type="text" id="customer-license-number" name="licenseNumber" value="${customer?.licenseNumber || ''}">
                    </div>
                    <div class="form-group">
                        <label for="customer-license-date">Ehliyet Tarihi</label>
                        <input type="date" id="customer-license-date" name="licenseDate" value="${customer?.licenseDate || ''}">
                    </div>
                </div>
                <div class="form-group">
                    <label for="customer-address">Adres</label>
                    <input type="text" id="customer-address" name="address" value="${customer?.address || ''}">
                </div>
                <div class="file-upload-group">
                    <label>Belge Yükleme</label>
                    <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-id-card"></i> Kimlik</span>
                         <input type="file" id="idFile" name="idFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                     <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-id-card-clip"></i> Ehliyet</span>
                         <input type="file" id="licenseFile" name="licenseFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="customer-modal">İptal</button>
                <button type="submit" form="customer-form" class="btn btn-primary">${isEditing ? 'Değişiklikleri Kaydet' : 'Müşteriyi Kaydet'}</button>
            </div>
        </div>
    </div>
`;
};
const RentalModal = () => {
    const vehicle = state.selectedVehicleForAction;
    if (!vehicle)
        return '';
    const today = vehicle.preselectedStartDate || new Date().toISOString().split('T')[0];
    const preselectedCustomerId = vehicle.preselectedCustomerId || null;
    return `
    <div class="modal-overlay" id="rental-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Kiralama Başlat: ${vehicle.plate}</h2>
                <button class="close-modal-btn" data-modal-id="rental-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="rental-form">
                <input type="hidden" name="vehiclePlate" value="${vehicle.plate}">
                
                <!-- Customer Selection -->
                <div class="form-group">
                    <label>Müşteri</label>
                    <div class="segmented-control">
                        <input type="radio" id="customer-type-existing" name="customerType" value="existing" ${state.rentalFormCustomerType === 'existing' ? 'checked' : ''}>
                        <label for="customer-type-existing">Mevcut Müşteri</label>
                        
                        <input type="radio" id="customer-type-new" name="customerType" value="new" ${state.rentalFormCustomerType === 'new' ? 'checked' : ''}>
                        <label for="customer-type-new">Yeni Müşteri</label>
                    </div>
                </div>

                <!-- Existing Customer Dropdown -->
                <div class="form-group" id="existing-customer-section" style="display: flex;">
                    <select name="customerId" id="customer-id-select">
                        <option value="">Müşteri Seçiniz...</option>
                        ${customersData.map(c => `<option value="${c.id}" ${c.id === preselectedCustomerId ? 'selected' : ''}>${c.name} - ${c.phone}</option>`).join('')}
                    </select>
                </div>

                <!-- New Customer Fields -->
                <div id="new-customer-section" style="display: none;">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="new-customer-name">Ad Soyad</label>
                            <input type="text" id="new-customer-name" name="newCustomerName">
                        </div>
                        <div class="form-group">
                            <label for="new-customer-tc">TC Kimlik No</label>
                            <input type="text" id="new-customer-tc" name="newCustomerTc">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="new-customer-phone">Telefon</label>
                            <input type="tel" id="new-customer-phone" name="newCustomerPhone">
                        </div>
                        <div class="form-group">
                            <label for="new-customer-email">Email</label>
                            <input type="email" id="new-customer-email" name="newCustomerEmail">
                        </div>
                    </div>
                </div>

                <!-- Rental Details -->
                <div class="form-row">
                    <div class="form-group">
                        <label for="rental-price">Ücret</label>
                        <input type="number" id="rental-price" name="price" placeholder="Örn: 1500" required>
                    </div>
                    <div class="form-group">
                        <label>Ücret Tipi</label>
                        <div class="segmented-control">
                            <input type="radio" id="price-type-daily" name="priceType" value="daily" checked>
                            <label for="price-type-daily">Günlük</label>
                            <input type="radio" id="price-type-monthly" name="priceType" value="monthly">
                            <label for="price-type-monthly">Aylık</label>
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="start-date">Kiralama Tarihi</label>
                        <input type="date" id="start-date" name="startDate" value="${today}" required>
                    </div>
                    <div class="form-group">
                        <label for="start-km">Başlangıç Kilometresi</label>
                        <input type="number" id="start-km" name="startKm" value="${vehicle.km.replace(/,/, '')}">
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="rental-modal">İptal</button>
                <button type="submit" form="rental-form" class="btn btn-primary">Kiralamayı Onayla</button>
            </div>
        </div>
    </div>
`;
};
const ReservationModal = () => {
    const today = new Date().toISOString().split('T')[0];
    return `
    <div class="modal-overlay" id="reservation-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Yeni Rezervasyon</h2>
                <button class="close-modal-btn" data-modal-id="reservation-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="reservation-form">
                <div class="form-group">
                    <label for="reservation-vehicle-select">Araç</label>
                    <select name="vehiclePlate" id="reservation-vehicle-select" required>
                        <option value="">Araç Seçiniz...</option>
                        ${vehiclesData.map(v => `<option value="${v.plate}">${v.plate} - ${v.brand}</option>`).join('')}
                    </select>
                </div>

                <div class="form-group">
                    <label>Müşteri</label>
                    <div class="segmented-control">
                        <input type="radio" id="res-customer-type-existing" name="customerType" value="existing" checked>
                        <label for="res-customer-type-existing">Mevcut Müşteri</label>
                        <input type="radio" id="res-customer-type-new" name="customerType" value="new">
                        <label for="res-customer-type-new">Yeni Müşteri</label>
                    </div>
                </div>

                <div class="form-group" id="res-existing-customer-section">
                    <select name="customerId" id="res-customer-id-select" required>
                        <option value="">Müşteri Seçiniz...</option>
                        ${customersData.map(c => `<option value="${c.id}">${c.name} - ${c.phone}</option>`).join('')}
                    </select>
                </div>

                <div id="res-new-customer-section" style="display: none;">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="res-new-customer-name">Ad Soyad</label>
                            <input type="text" id="res-new-customer-name" name="newCustomerName">
                        </div>
                        <div class="form-group">
                            <label for="res-new-customer-phone">Telefon</label>
                            <input type="tel" id="res-new-customer-phone" name="newCustomerPhone">
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group"><label for="res-start-date">Başlangıç Tarihi</label><input type="date" id="res-start-date" name="startDate" value="${today}" required></div>
                    <div class="form-group"><label for="res-end-date">Bitiş Tarihi</label><input type="date" id="res-end-date" name="endDate" required></div>
                </div>
                <div class="form-group"><label for="res-delivery-location">Teslim Yeri</label><input type="text" id="res-delivery-location" name="deliveryLocation" placeholder="Örn: Havaalanı Gelen Yolcu" required></div>
                <div class="form-group"><label for="res-notes">Notlar</label><textarea id="res-notes" name="notes" rows="3" placeholder="Rezervasyon ile ilgili notlar..."></textarea></div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="reservation-modal">İptal</button>
                <button type="submit" form="reservation-form" class="btn btn-primary">Rezervasyonu Kaydet</button>
            </div>
        </div>
    </div>
    `;
};
const ReservationEditModal = () => {
    if (state.editingReservationId === null)
        return '';
    const reservation = reservationsData.find(r => r.id === state.editingReservationId);
    if (!reservation)
        return '';
    return `
    <div class="modal-overlay" id="reservation-edit-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Rezervasyonu Düzenle</h2>
                <button class="close-modal-btn" data-modal-id="reservation-edit-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="reservation-edit-form">
                <input type="hidden" name="reservationId" value="${reservation.id}">
                <div class="form-group">
                    <label for="reservation-edit-vehicle-select">Araç</label>
                    <select name="vehiclePlate" id="reservation-edit-vehicle-select" required>
                        ${vehiclesData.map(v => `<option value="${v.plate}" ${reservation.vehiclePlate === v.plate ? 'selected' : ''}>${v.plate} - ${v.brand}</option>`).join('')}
                    </select>
                </div>

                 <div class="form-group">
                    <label for="reservation-edit-customer-select">Müşteri</label>
                    <select name="customerId" id="reservation-edit-customer-select" required>
                        ${customersData.map(c => `<option value="${c.id}" ${reservation.customerId === c.id ? 'selected' : ''}>${c.name} - ${c.phone}</option>`).join('')}
                    </select>
                </div>

                <div class="form-row">
                    <div class="form-group"><label for="res-edit-start-date">Başlangıç Tarihi</label><input type="date" id="res-edit-start-date" name="startDate" value="${reservation.startDate}" required></div>
                    <div class="form-group"><label for="res-edit-end-date">Bitiş Tarihi</label><input type="date" id="res-edit-end-date" name="endDate" value="${reservation.endDate}" required></div>
                </div>
                <div class="form-group"><label for="res-edit-delivery-location">Teslim Yeri</label><input type="text" id="res-edit-delivery-location" name="deliveryLocation" value="${reservation.deliveryLocation}" required></div>
                <div class="form-group"><label for="res-edit-notes">Notlar</label><textarea id="res-edit-notes" name="notes" rows="3" placeholder="Rezervasyon ile ilgili notlar...">${reservation.notes || ''}</textarea></div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="reservation-edit-modal">İptal</button>
                <button type="submit" form="reservation-edit-form" class="btn btn-primary">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
    `;
};
const RentalEditModal = () => {
    if (state.editingRentalId === null)
        return '';
    const rental = rentalsData.find(r => r.id === state.editingRentalId);
    if (!rental)
        return '';
    const customer = customersData.find(c => c.id === rental.customerId);
    return `
    <div class="modal-overlay" id="rental-edit-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Kiramayı Düzenle: ${rental.vehiclePlate}</h2>
                <button class="close-modal-btn" data-modal-id="rental-edit-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="rental-edit-form">
                <input type="hidden" name="rentalId" value="${rental.id}">
                <div class="customer-info-display" style="margin-bottom: 16px;">
                    <h4>Müşteri</h4>
                    <p><i class="fa-solid fa-user"></i> ${customer?.name || 'Bilinmiyor'}</p>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit-start-date">Başlangıç Tarihi</label>
                        <input type="date" id="edit-start-date" name="startDate" value="${rental.startDate}" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-end-date">Bitiş Tarihi</label>
                        <input type="date" id="edit-end-date" name="endDate" value="${rental.endDate || ''}">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit-start-km">Başlangıç KM</label>
                        <input type="number" id="edit-start-km" name="startKm" value="${rental.startKm}">
                    </div>
                    <div class="form-group">
                        <label for="edit-end-km">Bitiş KM</label>
                        <input type="number" id="edit-end-km" name="endKm" value="${rental.endKm || ''}">
                    </div>
                </div>

                <div class="file-upload-group">
                    <label>Belge Yükleme</label>
                    <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-file-contract"></i> Sözleşme</span>
                         <input type="file" name="contractFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                     <div class="file-input-wrapper">
                         <span><i class="fa-solid fa-file-invoice-dollar"></i> Fatura</span>
                         <input type="file" name="invoiceFile" accept=".pdf,.jpg,.jpeg,.png">
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="rental-edit-modal">İptal</button>
                <button type="submit" form="rental-edit-form" class="btn btn-primary">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
`;
};
const MaintenanceEditModal = () => {
    if (state.editingMaintenanceId === null)
        return '';
    const maint = maintenanceData.find(m => m.id === state.editingMaintenanceId);
    if (!maint)
        return '';
    return `
    <div class="modal-overlay" id="maintenance-edit-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Bakım Kaydını Düzenle</h2>
                <button class="close-modal-btn" data-modal-id="maintenance-edit-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="maintenance-edit-form">
                <input type="hidden" name="maintenanceId" value="${maint.id}">
                <div class="form-group"><label>Araç</label><input type="text" value="${maint.vehiclePlate}" readonly></div>
                <div class="form-row"><div class="form-group"><label>Bakım Tarihi</label><input type="date" name="maintenanceDate" value="${maint.maintenanceDate}" required></div><div class="form-group"><label>Bakım KM</label><input type="number" name="maintenanceKm" value="${maint.maintenanceKm}" required></div></div>
                <div class="form-row"><div class="form-group"><label>Bakım Türü</label><input type="text" name="type" value="${maint.type}" required></div><div class="form-group"><label>Maliyet (₺)</label><input type="number" name="cost" value="${maint.cost}" required></div></div>
                <div class="form-group"><label>Açıklama</label><textarea name="description" rows="3">${maint.description}</textarea></div>
                <div class="form-row"><div class="form-group"><label>Sonraki Bakım KM</label><input type="number" name="nextMaintenanceKm" value="${maint.nextMaintenanceKm}" required></div><div class="form-group"><label>Sonraki Bakım Tarihi</label><input type="date" name="nextMaintenanceDate" value="${maint.nextMaintenanceDate}" required></div></div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="maintenance-edit-modal">İptal</button>
                <button type="submit" form="maintenance-edit-form" class="btn btn-primary">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
    `;
};
const MaintenanceModal = () => {
    const today = new Date().toISOString().split('T')[0];
    return `
    <div class="modal-overlay" id="maintenance-modal-overlay">
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2>Yeni Bakım Kaydı</h2>
                <button class="close-modal-btn" data-modal-id="maintenance-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
            <form class="modal-form" id="maintenance-form">
                <div class="form-group">
                    <label for="maintenance-vehicle-select">Araç</label>
                    <select name="vehiclePlate" id="maintenance-vehicle-select" required>
                        <option value="">Araç Seçiniz...</option>
                        ${vehiclesData.map(v => `<option value="${v.plate}">${v.plate} - ${v.brand}</option>`).join('')}
                    </select>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="maintenance-date">Bakım Tarihi</label>
                        <input type="date" id="maintenance-date" name="maintenanceDate" value="${today}" required>
                    </div>
                    <div class="form-group">
                        <label for="maintenance-km">Bakım Kilometresi</label>
                        <input type="number" id="maintenance-km" name="maintenanceKm" placeholder="Örn: 95000" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="maintenance-type">Bakım Türü</label>
                        <input type="text" id="maintenance-type" name="type" placeholder="Örn: Periyodik Bakım" required>
                    </div>
                    <div class="form-group">
                        <label for="maintenance-cost">Maliyet (₺)</label>
                        <input type="number" id="maintenance-cost" name="cost" placeholder="Örn: 1500" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="maintenance-description">Açıklama / Yapılan İşlemler</label>
                    <textarea id="maintenance-description" name="description" rows="3" placeholder="Yağ, filtre değişimi..."></textarea>
                </div>
                <fieldset class="next-maintenance-fieldset">
                    <legend>Sonraki Bakım Bilgileri (Otomatik)</legend>
                    <div class="form-row">
                        <div class="form-group"><label for="next-maintenance-km">Sonraki Bakım KM</label><input type="number" id="next-maintenance-km" name="nextMaintenanceKm" readonly></div>
                        <div class="form-group"><label for="next-maintenance-date">Sonraki Bakım Tarihi</label><input type="date" id="next-maintenance-date" name="nextMaintenanceDate" readonly></div>
                    </div>
                </fieldset>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="maintenance-modal">İptal</button>
                <button type="submit" form="maintenance-form" class="btn btn-primary">Kaydı Oluştur</button>
            </div>
        </div>
    </div>
    `;
};
const CheckInModal = () => {
    const vehicle = state.selectedVehicleForAction;
    if (!vehicle || !vehicle.rentedBy)
        return '';
    const today = new Date().toISOString().split('T')[0];
    return `
    <div class="modal-overlay" id="check-in-modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Teslim Al: ${vehicle.plate}</h2>
                <button class="close-modal-btn" data-modal-id="check-in-modal"><i class="fa-solid fa-xmark"></i></button>
            </div>
             <form class="modal-form" id="check-in-form">
                <input type="hidden" name="rentalId" value="${vehicle.activeRentalId}">
                <div class="customer-info-display">
                    <h4>Mevcut Kiracı</h4>
                    <p><i class="fa-solid fa-user"></i> ${vehicle.rentedBy.name}</p>
                    <p><i class="fa-solid fa-phone"></i> ${vehicle.rentedBy.phone}</p>
                </div>
                <div class="form-row" style="margin-top: 16px;">
                    <div class="form-group">
                        <label for="return-date">Teslim Tarihi</label>
                        <input type="date" id="return-date" name="returnDate" value="${today}" required>
                    </div>
                    <div class="form-group">
                        <label for="return-km">Dönüş Kilometresi</label>
                        <input type="number" id="return-km" name="returnKm" placeholder="Örn: ${parseInt(vehicle.km.replace(/,/, '')) + 1000}" required>
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-modal-id="check-in-modal">İptal</button>
                <button type="submit" form="check-in-form" class="btn btn-primary">Aracı Teslim Al</button>
            </div>
        </div>
    </div>
`;
};
const App = () => {
    let pageContent = '';
    switch (state.activePage) {
        case 'dashboard':
            pageContent = DashboardPage();
            break;
        case 'vehicles':
            pageContent = VehiclesPage();
            break;
        case 'customers':
            pageContent = CustomersPage();
            break;
        case 'rentals':
            pageContent = RentalsPage();
            break;
        case 'reservations':
            pageContent = ReservationsPage();
            break;
        case 'maintenance':
            pageContent = MaintenancePage();
            break;
        case 'reports':
            pageContent = ReportsPage();
            break;
        case 'notifications':
            pageContent = NotificationsPage();
            break;
        case 'settings':
            pageContent = SettingsPage();
            break;
        default:
            pageContent = DashboardPage();
    }
    return `
    <nav class="sidebar">
      <div class="sidebar-header">
        <img src="https://storage.googleapis.com/genai-web-experiments/logo-horizontal.png" alt="Rehber Otomotiv Logo" class="sidebar-logo" />
      </div>
      <ul class="nav-menu">
        ${navItems.map(item => `
          <li>
            <a href="#" class="nav-link ${state.activePage === item.id ? 'active' : ''}" data-page-id="${item.id}">
              <i class="${item.icon}"></i>
              <span>${item.text}</span>
            </a>
          </li>
        `).join('')}
      </ul>
    </nav>
    <main class="main-content">
      ${pageContent}
    </main>
      ${state.isVehicleModalOpen ? VehicleModal() : ''}
      ${state.isRentalModalOpen ? RentalModal() : ''}
      ${state.isCustomerModalOpen ? CustomerModal() : ''}
      ${state.isCheckInModalOpen ? CheckInModal() : ''}
      ${state.isReservationModalOpen ? ReservationModal() : ''}
      ${state.isMaintenanceModalOpen ? MaintenanceModal() : ''}
      ${state.isMaintenanceEditModalOpen ? MaintenanceEditModal() : ''}
      ${state.isRentalEditModalOpen ? RentalEditModal() : ''}
      ${state.isReservationEditModalOpen ? ReservationEditModal() : ''}
  `;
};
function renderApp() {
    try {
        // console.log('Rendering app...');
        const root = document.getElementById('root');
        document.body.className = state.theme; // Apply theme on every render
        render(App(), root);
        // console.log('App rendered successfully.');
    }
    catch (error) {
        console.error('!!! HATA: renderApp fonksiyonunda bir sorun oluştu:', error);
        const root = document.getElementById('root');
        if (root) {
            root.innerHTML = `<div style="padding: 20px; text-align: center; color: red;"><h1>Uygulama Çizilirken Kritik Bir Hata Oluştu</h1><p>Lütfen konsolu (F12) kontrol edin.</p><pre>${error.message}</pre></div>`;
        }
    }
}
function attachEventListeners() {
    try {
        // console.log('Attaching event listeners...');
        // Theme switcher
        document.getElementById('theme-toggle')?.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const newTheme = isChecked ? 'dark' : 'light';
            document.body.className = newTheme; // Apply theme to body
            setState({ theme: newTheme });
        });
        // Settings Page Accordion
        document.querySelectorAll('.settings-accordion-header').forEach(header => {
            header.addEventListener('click', () => {
                const accordion = header.closest('.settings-accordion');
                accordion.classList.toggle('active');
                const content = accordion.querySelector('.settings-accordion-content');
                if (accordion.classList.contains('active')) {
                    content.style.maxHeight = content.scrollHeight + 'px';
                }
                else {
                    content.style.maxHeight = '0';
                }
            });
        });
        // Settings Page - Company Info & PDF settings
        document.querySelectorAll('[data-company-key]').forEach(input => {
            input.addEventListener('input', (e) => {
                const key = e.target.dataset.companyKey;
                const value = e.target.value;
                const newCompanyInfo = { ...state.settings.companyInfo, [key]: value };
                setState({ settings: { ...state.settings, companyInfo: newCompanyInfo } });
            });
        });
        document.getElementById('companyLogoFile')?.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const base64String = reader.result;
                    const newCompanyInfo = { ...state.settings.companyInfo, logo: base64String };
                    setState({ settings: { ...state.settings, companyInfo: newCompanyInfo } });
                };
                reader.readAsDataURL(file);
            }
        });
        document.getElementById('remove-logo-btn')?.addEventListener('click', () => {
            const newCompanyInfo = { ...state.settings.companyInfo, logo: null };
            setState({ settings: { ...state.settings, companyInfo: newCompanyInfo } });
        });
        document.getElementById('companyPdfBackgroundFile')?.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const base64String = reader.result;
                    const newCompanyInfo = { ...state.settings.companyInfo, pdfBackground: base64String };
                    setState({ settings: { ...state.settings, companyInfo: newCompanyInfo } });
                };
                reader.readAsDataURL(file);
            }
        });
        document.getElementById('remove-pdf-background-btn')?.addEventListener('click', () => {
            const newCompanyInfo = { ...state.settings.companyInfo, pdfBackground: null };
            setState({ settings: { ...state.settings, companyInfo: newCompanyInfo } });
        });
        // Settings Page Controls
        document.querySelectorAll('[data-setting-key]').forEach(el => {
            el.addEventListener('change', (e) => {
                const key = e.target.dataset.settingKey;
                const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;
                setState({ settings: { ...state.settings, [key]: value } });
                saveDataToLocalStorage(); // Ayar değiştiğinde kaydet
            });
        });
        // PDF Checkboxes
        document.getElementById('pdf_show_logo')?.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const newPdfSettings = { ...state.settings.pdfSettings, showLogo: isChecked };
            setState({ settings: { ...state.settings, pdfSettings: newPdfSettings } });
        });
        document.getElementById('pdf_show_footer')?.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const newPdfSettings = { ...state.settings.pdfSettings, showFooter: isChecked };
            setState({ settings: { ...state.settings, pdfSettings: newPdfSettings } });
        });
        document.getElementById('pdf_show_background')?.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const newPdfSettings = { ...state.settings.pdfSettings, showBackground: isChecked };
            setState({ settings: { ...state.settings, pdfSettings: newPdfSettings } });
        });
        // Settings Page - Save Button
        document.querySelector('.btn-gradient-save')?.addEventListener('click', () => {
            // Veriler her değişiklikte zaten kaydediliyor, bu buton sadece geri bildirim ve UI temizliği için.
            saveDataToLocalStorage(); // En son halini garantiye alarak kaydet.
            showToast('Ayarlar başarıyla kaydedildi!', 'success');
            // Tüm açık akordiyonları kapat
            document.querySelectorAll('.settings-accordion.active').forEach(accordion => {
                accordion.classList.remove('active');
                const content = accordion.querySelector('.settings-accordion-content');
                if (content) {
                    content.style.maxHeight = '0';
                }
            });
        });
        // Settings Page - Backup and Restore
        document.getElementById('btn-export-data')?.addEventListener('click', () => {
            const dataToExport = {
                vehiclesData,
                customersData,
                rentalsData,
                reservationsData,
                maintenanceData,
                activitiesData,
                theme: state.theme,
                readNotifications: state.readNotifications,
                settings: state.settings,
            };
            const dataStr = JSON.stringify(dataToExport, null, 2); // Pretty print JSON
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `rehber-otomotiv-yedek-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });
        const importFileInput = document.getElementById('import-file-input');
        document.getElementById('btn-import-data')?.addEventListener('click', () => {
            importFileInput.click();
        });
        importFileInput?.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const importedData = JSON.parse(e.target.result);
                        let dataToLoad = {};
                        if (importedData.vehiclesData) {
                            // Eğer bizim kendi yedek dosyamız ise, olduğu gibi al.
                            console.log("Standart yedek dosyası tespit edildi.");
                            dataToLoad = importedData;
                        }
                        else if (importedData.vehicles || importedData.rentals || importedData.maintenance) {
                            console.log("Harici format tespit edildi, veriler dönüştürülüyor...");
                            // 1. Müşterileri Kiralamalardan Çıkar
                            let tempCustomersData = JSON.parse(JSON.stringify(customersData)); // Deep copy to avoid issues
                            let nextCustomerId = Math.max(0, ...tempCustomersData.map(c => c.id)) + 1;
                            if (importedData.rentals && Array.isArray(importedData.rentals)) {
                                importedData.rentals.forEach(rental => {
                                    const customerName = rental.customer?.trim();
                                    if (customerName && !tempCustomersData.some(c => c.name.toLowerCase() === customerName.toLowerCase())) {
                                        const newCustomer = {
                                            id: nextCustomerId++,
                                            name: customerName,
                                            tc: '', phone: '', email: '', address: '', licenseNumber: '', licenseDate: '',
                                            idFile: null, idFileUrl: null, licenseFile: null, licenseFileUrl: null,
                                            rentals: []
                                        };
                                        tempCustomersData.push(newCustomer);
                                    }
                                });
                                dataToLoad.customersData = tempCustomersData;
                            }
                            else {
                                // Eğer kiralama verisi yoksa, mevcut müşterileri koru
                                dataToLoad.customersData = tempCustomersData;
                            }
                            // 2. Araçları Dönüştür
                            if (importedData.vehicles && Array.isArray(importedData.vehicles)) {
                                const convertedVehicles = importedData.vehicles.map(v => {
                                    const getFileName = (path) => path ? path.split('\\').pop().split('/').pop() : null;
                                    return {
                                        plate: v.plate,
                                        brand: `${v.brand || ''} ${v.model || ''}`.trim(),
                                        km: (v.km || 0).toLocaleString('tr-TR'),
                                        status: 'Müsait', // Başlangıçta hepsini Müsait yap, sonra kiralamalara göre güncelleyeceğiz.
                                        insuranceDate: v.insurance || null,
                                        inspectionDate: v.inspection || null,
                                        insuranceFile: v.gorseller ? getFileName(v.gorseller.sigorta) : null,
                                        inspectionFile: v.gorseller ? getFileName(v.gorseller.muayene) : null,
                                        licenseFile: v.gorseller ? getFileName(v.gorseller.ruhsat) : null,
                                        insuranceFileUrl: null, // Local paths cannot be used
                                        inspectionFileUrl: null,
                                        licenseFileUrl: null,
                                    };
                                });
                                dataToLoad.vehiclesData = convertedVehicles;
                            }
                            // 3. Kiralamaları Dönüştür
                            if (importedData.rentals && Array.isArray(importedData.rentals)) {
                                const convertedRentals = importedData.rentals.map(r => {
                                    const customer = tempCustomersData.find(c => c.name.toLowerCase() === r.customer?.toLowerCase());
                                    const isActive = r.endDate === "" || !r.endDate;
                                    return {
                                        id: Date.now() + Math.random(), // Use a more robust ID
                                        vehiclePlate: r.plate,
                                        customerId: customer ? customer.id : 0,
                                        startDate: r.startDate,
                                        endDate: isActive ? null : r.endDate,
                                        startKm: r.startKm || 0,
                                        endKm: isActive ? null : r.endKm,
                                        price: r.rate || 0,
                                        priceType: r.per === 'Aylık' ? 'monthly' : 'daily',
                                        totalCost: null, // Needs calculation on check-in
                                        contractFile: r.contract ? r.contract.split('\\').pop() : null,
                                        invoiceFile: r.invoice ? r.invoice.split('\\').pop() : null,
                                        contractFileUrl: null,
                                        invoiceFileUrl: null,
                                        status: isActive ? 'active' : 'completed',
                                    };
                                });
                                dataToLoad.rentalsData = convertedRentals.filter(r => r.customerId !== 0);
                                // 3.5. Araç Durumlarını Kiralamalara Göre Güncelle
                                if (dataToLoad.vehiclesData) {
                                    dataToLoad.vehiclesData.forEach(vehicle => {
                                        const activeRental = dataToLoad.rentalsData.find(rental => rental.vehiclePlate === vehicle.plate && rental.status === 'active');
                                        if (activeRental) {
                                            vehicle.status = 'Kirada';
                                            // İsteğe bağlı: Kiracı bilgisini de ekleyebiliriz
                                        }
                                    });
                                }
                            }
                            // 4. Bakımları Dönüştür
                            if (importedData.maintenance && Array.isArray(importedData.maintenance)) {
                                dataToLoad.maintenanceData = importedData.maintenance.map(m => {
                                    const maintenanceKm = m.km || 0;
                                    const nextDate = new Date(m.date);
                                    nextDate.setFullYear(nextDate.getFullYear() + 1);
                                    return {
                                        id: Date.now() + Math.random(),
                                        vehiclePlate: m.plate,
                                        maintenanceDate: m.date,
                                        maintenanceKm: maintenanceKm,
                                        type: m.type || 'Genel Bakım',
                                        cost: m.cost || 0,
                                        description: m.note || '',
                                        nextMaintenanceKm: maintenanceKm + 15000,
                                        nextMaintenanceDate: nextDate.toISOString().split('T')[0],
                                    };
                                });
                            }
                            // 5. Rezervasyonları ve Ayarları Dönüştür (varsa)
                            if (importedData.reservations) {
                                dataToLoad.reservationsData = importedData.reservations; // Assuming format is compatible
                            }
                            if (importedData.settings) {
                                dataToLoad.settings = importedData.settings;
                            }
                        }
                        else {
                            throw new Error("Dosya beklenen formatta değil. 'vehicles', 'rentals', 'maintenance' veya 'vehiclesData' anahtarı bulunamadı.");
                        }
                        if (confirm('Veriler içe aktarılacak. Bu işlem, dosyadaki verileri mevcut verilerinizin üzerine yazacaktır. Onaylıyor musunuz?')) {
                            // Mevcut verileri al
                            const currentData = JSON.parse(localStorage.getItem('rehberOtomotivData') || '{}');
                            // İçe aktarılan veriyi mevcut verinin üzerine "birleştir".
                            // Bu sayede sadece içe aktarılan dosyada olan alanlar güncellenir.
                            const mergedData = {
                                ...currentData,
                                ...dataToLoad
                            };
                            localStorage.setItem('rehberOtomotivData', JSON.stringify(mergedData));
                            localStorage.setItem('showImportSuccessToast', 'true'); // Başarı mesajı için işaret bırak
                            // Kaydetme fonksiyonunu burada çağırmıyoruz, çünkü zaten localStorage'a yazdık.
                            window.location.reload(); // Sayfayı yeniden yükleyerek en temiz şekilde verileri almasını sağla
                        }
                    }
                    catch (err) {
                        showToast(`Hata: ${err.message}. Lütfen doğru formatta bir JSON dosyası seçtiğinizden emin olun.`, 'error');
                        console.error("Veri içe aktarılırken hata:", err);
                    }
                };
                reader.readAsText(file);
            }
        });
        // Notification filter buttons
        document.querySelectorAll('.notification-filters .filter-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const filter = btn.dataset.filter;
                setState({ notificationFilter: filter });
            });
        });
        // Notification card click (for reminders)
        document.querySelectorAll('.notification-card[data-vehicle-index]').forEach(card => {
            const vehicleIndexStr = card.dataset.vehicleIndex;
            const notificationId = parseInt(card.dataset.notificationId, 10);
            const clickHandler = () => {
                // Mark as read logic
                if (!state.readNotifications.includes(notificationId)) {
                    const newReadNotifications = [...state.readNotifications, notificationId];
                    setState({ readNotifications: newReadNotifications }); // Update state properly
                    saveDataToLocalStorage(); // Save the change
                    card.classList.add('read'); // Update UI immediately
                }
                // Navigate to vehicle details by opening the modal if it's a reminder
                if (vehicleIndexStr && vehicleIndexStr !== "") {
                    const vehicleIndex = parseInt(vehicleIndexStr, 10);
                    setState({ activePage: 'vehicles', editingVehicleIndex: vehicleIndex, isVehicleModalOpen: true });
                }
            };
            card.addEventListener('click', clickHandler);
        });
        // Navigation
        document.querySelectorAll('.nav-link, .stat-card, .quick-access-btn').forEach(el => {
            const pageId = el.dataset.pageId;
            // Special handling for quick access buttons that open modals instead of navigating
            if (pageId === 'vehicles' && el.classList.contains('btn-add-vehicle'))
                return;
            if (pageId === 'customers' && el.classList.contains('btn-add-customer'))
                return;
            if (pageId === 'rentals' && el.classList.contains('btn-start-rental'))
                return;
            if (pageId === 'maintenance' && el.classList.contains('btn-add-maintenance'))
                return;
            if (pageId) {
                el.addEventListener('click', (e) => {
                    e.preventDefault();
                    navigateTo(pageId);
                });
            }
        });
        // Quick access buttons on dashboard
        document.querySelector('.btn-add-vehicle')?.addEventListener('click', () => openModal('vehicle'));
        document.querySelector('.btn-add-customer')?.addEventListener('click', () => openModal('customer'));
        // For now, other quick access buttons navigate to their pages, which is handled above.
        // Rent button on dashboard available vehicles list
        document.querySelectorAll('.btn-rent-small').forEach(btn => {
            const plate = btn.dataset.vehiclePlate;
            const vehicleIndex = vehiclesData.findIndex(v => v.plate === plate);
            if (vehicleIndex > -1) {
                btn.addEventListener('click', () => openModal('rental', vehicleIndex));
            }
        });
        const openModal = (modalType, entityIndex) => {
            const newState = {
                editingVehicleIndex: null,
                editingCustomerIndex: null,
                editingRentalId: null,
                editingReservationId: null,
                editingMaintenanceId: null,
            };
            if (modalType === 'vehicle') {
                newState.isVehicleModalOpen = true;
                if (typeof entityIndex === 'number')
                    newState.editingVehicleIndex = entityIndex;
            }
            if (modalType === 'rental') {
                newState.isRentalModalOpen = true;
                newState.rentalFormCustomerType = 'existing'; // Reset to default
                if (typeof entityIndex === 'number')
                    newState.selectedVehicleForAction = vehiclesData[entityIndex];
            }
            if (modalType === 'check-in') {
                newState.isCheckInModalOpen = true;
                if (typeof entityIndex === 'number')
                    newState.selectedVehicleForAction = vehiclesData[entityIndex];
            }
            if (modalType === 'customer') {
                newState.isCustomerModalOpen = true;
                if (typeof entityIndex === 'number')
                    newState.editingCustomerIndex = entityIndex;
            }
            if (modalType === 'rental-edit') {
                newState.isRentalEditModalOpen = true;
                if (entityIndex !== undefined)
                    newState.editingRentalId = parseInt(String(entityIndex), 10); // String'i sayıya çevir.
            }
            if (modalType === 'reservation') {
                newState.isReservationModalOpen = true;
            }
            if (modalType === 'maintenance') {
                newState.isMaintenanceModalOpen = true;
            }
            if (modalType === 'maintenance-edit') {
                newState.isMaintenanceEditModalOpen = true;
                if (entityIndex !== undefined)
                    newState.editingMaintenanceId = parseInt(String(entityIndex), 10); // String'i sayıya çevir.
            }
            if (modalType === 'reservation-edit') {
                newState.isReservationEditModalOpen = true;
                if (entityIndex !== undefined)
                    newState.editingReservationId = parseInt(String(entityIndex), 10); // String'i sayıya çevir.
            }
            setState(newState);
        };
        const closeModal = (modalType) => {
            const newState = {
                selectedVehicleForAction: null,
                editingVehicleIndex: null,
                editingCustomerIndex: null,
                editingRentalId: null,
                editingReservationId: null,
                editingMaintenanceId: null,
            };
            switch (modalType) {
                case 'vehicle':
                    newState.isVehicleModalOpen = false;
                    break;
                case 'rental':
                    newState.isRentalModalOpen = false;
                    break;
                case 'check-in':
                    newState.isCheckInModalOpen = false;
                    break;
                case 'customer':
                    newState.isCustomerModalOpen = false;
                    break;
                case 'rental-edit':
                    newState.isRentalEditModalOpen = false;
                    break;
                case 'reservation':
                    newState.isReservationModalOpen = false;
                    break;
                case 'maintenance':
                    newState.isMaintenanceModalOpen = false;
                    break;
                case 'maintenance-edit':
                    newState.isMaintenanceEditModalOpen = false;
                    break;
                case 'reservation-edit':
                    newState.isReservationEditModalOpen = false;
                    break;
            }
            setState(newState);
        };
        // Open vehicle modal
        document.getElementById('add-vehicle-btn')?.addEventListener('click', () => openModal('vehicle'));
        document.getElementById('add-customer-btn')?.addEventListener('click', () => openModal('customer'));
        // Open reservation/maintenance modals
        document.getElementById('add-reservation-btn')?.addEventListener('click', () => openModal('reservation'));
        document.getElementById('add-maintenance-btn')?.addEventListener('click', () => openModal('maintenance'));
        // Open rental/check-in modals
        document.querySelectorAll('.btn-rent').forEach(btn => {
            const card = btn.closest('.vehicle-card');
            const vehicleIndex = parseInt(card.dataset.vehicleIndex, 10);
            btn.addEventListener('click', () => openModal('rental', vehicleIndex));
        });
        document.querySelectorAll('.btn-check-in').forEach(btn => {
            const card = btn.closest('.vehicle-card');
            const vehicleIndex = parseInt(card.dataset.vehicleIndex, 10);
            btn.addEventListener('click', () => openModal('check-in', vehicleIndex));
        });
        // Edit/Delete vehicle buttons
        document.querySelectorAll('.btn-edit-vehicle').forEach(btn => {
            const card = btn.closest('.vehicle-card');
            const vehicleIndex = parseInt(card.dataset.vehicleIndex, 10);
            btn.addEventListener('click', () => openModal('vehicle', vehicleIndex));
        });
        document.querySelectorAll('.btn-delete-vehicle').forEach(btn => {
            const card = btn.closest('.vehicle-card');
            const vehicleIndex = parseInt(card.dataset.vehicleIndex, 10);
            btn.addEventListener('click', () => {
                const vehicle = vehiclesData[vehicleIndex];
                if (confirm(`'${vehicle.plate}' plakalı aracı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.`)) {
                    vehiclesData.splice(vehicleIndex, 1);
                    setState({}); // Trigger re-render and save which also calls saveDataToLocalStorage
                }
            });
        });
        // Edit/Delete customer buttons
        document.querySelectorAll('.btn-edit-customer').forEach(btn => {
            const accordion = btn.closest('.customer-accordion');
            const customerIndex = parseInt(accordion.dataset.customerIndex, 10);
            btn.addEventListener('click', (e) => {
                e.stopPropagation(); // Prevent accordion from opening/closing
                openModal('customer', customerIndex);
            });
        });
        document.querySelectorAll('.btn-delete-customer').forEach(btn => {
            const accordion = btn.closest('.customer-accordion');
            const customerIndex = parseInt(accordion.dataset.customerIndex, 10);
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const customer = customersData[customerIndex];
                if (confirm(`'${customer.name}' adlı müşteriyi silmek istediğinizden emin misiniz?`)) {
                    customersData.splice(customerIndex, 1);
                    setState({}); // Trigger re-render and save
                }
            });
        });
        // View Maintenance History button on vehicle card
        document.querySelectorAll('.btn-view-maintenance').forEach(btn => {
            const card = btn.closest('.vehicle-card');
            const vehicleIndex = parseInt(card.dataset.vehicleIndex, 10);
            const vehicle = vehiclesData[vehicleIndex];
            if (vehicle) {
                btn.addEventListener('click', () => {
                    setState({ activePage: 'maintenance', searchTerm: vehicle.plate });
                });
            }
        });
        // --- PAGE-SPECIFIC EVENT LISTENERS ---
        // RENTALS PAGE: Card buttons
        if (state.activePage === 'rentals') {
            const rentalsList = document.querySelector('.rentals-list');
            if (rentalsList) {
                rentalsList.addEventListener('click', (e) => {
                    const target = e.target;
                    const button = target.closest('[data-action]');
                    if (!button)
                        return;
                    const action = button.dataset.action;
                    const card = button.closest('.rental-card');
                    const rentalId = card?.dataset.rentalId;
                    const docUrl = button.dataset.docUrl;
                    if (!action || !rentalId)
                        return;
                    if (action === 'delete-rental') {
                        if (confirm(`Bu kiralama kaydını silmek istediğinizden emin misiniz?`)) {
                            const rentalIndex = rentalsData.findIndex(r => r.id === parseInt(rentalId, 10));
                            if (rentalIndex > -1) {
                                rentalsData.splice(rentalIndex, 1);
                                setState({});
                                showToast('Kiralama kaydı silindi.', 'success');
                            }
                        }
                    }
                    else if (action === 'edit-rental' || action === 'upload-doc') {
                        openModal('rental-edit', rentalId);
                    }
                    else if (action === 'view-doc' && docUrl) {
                        window.open(docUrl, '_blank');
                    }
                });
            }
        }
        // --- REPORTS PAGE LISTENERS ---
        if (state.activePage === 'reports') {
            const reportSelect = document.getElementById('report-rental-select');
            const generateBtn = document.getElementById('generate-report-btn');
            if (reportSelect && generateBtn) {
                reportSelect.addEventListener('change', () => {
                    generateBtn.disabled = !reportSelect.value;
                });
                if (!generateBtn.dataset.listenerAttached) {
                    generateBtn.addEventListener('click', () => {
                        if (reportSelect.value) {
                            const selectedRentalId = parseInt(reportSelect.value, 10);
                            const rental = rentalsData.find(r => r.id === selectedRentalId);
                            if (rental)
                                generateRentalSummaryPDF(rental);
                        }
                    });
                    generateBtn.dataset.listenerAttached = 'true';
                }
            }
        }
        // Dashboard -> Vehicle Page filtering
        document.querySelectorAll('.distribution-item-reimagined').forEach(item => {
            const statusFilter = item.dataset.statusFilter;
            if (statusFilter) {
                item.addEventListener('click', () => {
                    setState({ activePage: 'vehicles', vehicleStatusFilter: statusFilter, searchTerm: '' });
                });
            }
        });
        // Edit/Delete reservation buttons
        document.querySelectorAll('.btn-edit-reservation').forEach(btn => {
            const card = btn.closest('.reservation-card');
            const reservationId = card.dataset.reservationId;
            btn.addEventListener('click', () => openModal('reservation-edit', reservationId));
        });
        document.querySelectorAll('.btn-delete-reservation').forEach(btn => {
            const card = btn.closest('.reservation-card');
            const reservationId = parseInt(card.dataset.reservationId, 10);
            btn.addEventListener('click', () => {
                if (confirm(`Bu rezervasyon kaydını silmek istediğinizden emin misiniz?`)) {
                    const resIndex = reservationsData.findIndex(r => r.id === reservationId);
                    if (resIndex > -1) {
                        reservationsData.splice(resIndex, 1);
                        setState({}); // Trigger re-render and save
                    }
                }
            });
        });
        // Edit/Delete maintenance buttons
        document.querySelectorAll('.btn-edit-maintenance').forEach(btn => {
            const card = btn.closest('.maintenance-card');
            const maintenanceId = card.dataset.maintenanceId;
            btn.addEventListener('click', () => openModal('maintenance-edit', maintenanceId));
        });
        document.querySelectorAll('.btn-delete-maintenance').forEach(btn => {
            const card = btn.closest('.maintenance-card');
            const maintenanceId = parseInt(card.dataset.maintenanceId, 10);
            btn.addEventListener('click', () => {
                if (confirm(`Bu bakım kaydını silmek istediğinizden emin misiniz?`)) {
                    const maintIndex = maintenanceData.findIndex(m => m.id === maintenanceId);
                    if (maintIndex > -1) {
                        maintenanceData.splice(maintIndex, 1);
                        setState({}); // Trigger re-render and save
                    }
                }
            });
        });
        document.getElementById('vehicle-form')?.addEventListener('submit', handleVehicleFormSubmit);
        document.getElementById('customer-form')?.addEventListener('submit', handleCustomerFormSubmit);
        document.getElementById('rental-form')?.addEventListener('submit', handleRentalFormSubmit);
        document.getElementById('check-in-form')?.addEventListener('submit', handleCheckInFormSubmit);
        document.getElementById('rental-edit-form')?.addEventListener('submit', handleRentalEditFormSubmit);
        document.getElementById('reservation-form')?.addEventListener('submit', handleReservationFormSubmit);
        document.getElementById('reservation-edit-form')?.addEventListener('submit', handleReservationEditFormSubmit);
        document.getElementById('maintenance-form')?.addEventListener('submit', handleMaintenanceFormSubmit);
        document.getElementById('maintenance-edit-form')?.addEventListener('submit', handleMaintenanceEditFormSubmit);
        // Close modal listeners for buttons with data-modal-id
        document.querySelectorAll('.close-modal-btn, .modal-footer .btn-secondary').forEach(btn => {
            const modalIdWithSuffix = btn.dataset.modalId;
            if (modalIdWithSuffix) {
                const modalId = modalIdWithSuffix.replace('-modal', '');
                btn.addEventListener('click', () => closeModal(modalId));
            }
        });
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', e => {
                if (e.target === overlay) {
                    const modalId = overlay.id.replace('-modal-overlay', '');
                    closeModal(modalId);
                }
            });
        });
        // Customer Accordion
        document.querySelectorAll('.accordion-header').forEach(header => {
            header.addEventListener('click', () => {
                const accordionItem = header.parentElement;
                const content = accordionItem.querySelector('.accordion-content');
                const arrow = header.querySelector('.accordion-arrow');
                accordionItem.classList.toggle('active');
                if (accordionItem.classList.contains('active')) {
                    content.style.maxHeight = content.scrollHeight + 40 + "px"; // Add padding
                    if (arrow)
                        arrow.style.transform = 'rotate(180deg)';
                }
                else {
                    content.style.maxHeight = null;
                    if (arrow)
                        arrow.style.transform = 'rotate(0deg)';
                }
            });
        });
        // Search functionality
        const handleSearch = (e) => {
            const searchTerm = e.target.value;
            setState({ searchTerm });
        };
        document.getElementById('vehicle-search')?.addEventListener('input', handleSearch);
        document.getElementById('customer-search')?.addEventListener('input', handleSearch);
        document.getElementById('rental-search')?.addEventListener('input', handleSearch);
        document.getElementById('reservation-search')?.addEventListener('input', handleSearch);
        document.getElementById('maintenance-search')?.addEventListener('input', handleSearch);
        // Clear Maintenance Filter Button
        document.getElementById('clear-maintenance-filter')?.addEventListener('click', () => {
            setState({ searchTerm: '' });
        });
        // Vehicle Page Expiring Filter Button
        document.getElementById('filter-expiring-btn')?.addEventListener('click', () => {
            setState({ filterExpiring: !state.filterExpiring });
        });
        // Rental Modal Customer Type Toggle
        document.querySelectorAll('input[name="customerType"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                const value = e.target.value;
                // Toggle required attributes to fix form submission
                const customerSelect = document.getElementById('customer-id-select');
                const newCustomerName = document.getElementById('new-customer-name');
                const newCustomerTc = document.getElementById('new-customer-tc');
                const newCustomerPhone = document.getElementById('new-customer-phone');
                if (value === 'new') {
                    customerSelect.required = false;
                    newCustomerName.required = true;
                    newCustomerTc.required = true;
                    newCustomerPhone.required = true;
                }
                else {
                    customerSelect.required = true;
                    newCustomerName.required = false;
                    newCustomerTc.required = false;
                    newCustomerPhone.required = false;
                }
                setState({ rentalFormCustomerType: value });
            });
        });
        // Reservation Modal Customer Type Toggle
        document.querySelectorAll('input[name="customerType"][id^="res-"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                const value = e.target.value;
                const existingSection = document.getElementById('res-existing-customer-section');
                const newSection = document.getElementById('res-new-customer-section');
                const customerSelect = document.getElementById('res-customer-id-select');
                const newName = document.getElementById('res-new-customer-name');
                const newPhone = document.getElementById('res-new-customer-phone');
                existingSection.style.display = value === 'existing' ? 'flex' : 'none';
                newSection.style.display = value === 'new' ? 'block' : 'none';
                customerSelect.required = value === 'existing';
                newName.required = value === 'new';
                newPhone.required = value === 'new';
            });
        });
        // Auto-calculate next maintenance date/km
        const maintenanceKmInput = document.getElementById('maintenance-km');
        const maintenanceDateInput = document.getElementById('maintenance-date');
        const nextKmInput = document.getElementById('next-maintenance-km');
        const nextDateInput = document.getElementById('next-maintenance-date');
        const updateNextMaintenance = () => {
            if (maintenanceKmInput && nextKmInput) {
                nextKmInput.value = (parseInt(maintenanceKmInput.value || '0') + 15000).toString();
            }
            if (maintenanceDateInput && nextDateInput && maintenanceDateInput.value) {
                const nextDate = new Date(maintenanceDateInput.value);
                nextDate.setFullYear(nextDate.getFullYear() + 1);
                nextDateInput.value = nextDate.toISOString().split('T')[0];
            }
        };
        maintenanceKmInput?.addEventListener('input', updateNextMaintenance);
        maintenanceDateInput?.addEventListener('input', updateNextMaintenance);
        // console.log('Event listeners attached successfully.');
    }
    catch (error) {
        console.error('!!! HATA: attachEventListeners fonksiyonunda bir sorun oluştu:', error);
    }
}
function handleVehicleFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        const insuranceFile = formData.get('insuranceFile'); // Belge dosyalarını al
        const inspectionFile = formData.get('inspectionFile');
        const licenseFile = formData.get('licenseFile');
        const vehicleDataUpdate = {
            plate: formData.get('plate'),
            brand: `${formData.get('brand')} ${formData.get('model')}`,
            km: (formData.get('km') || '').replace(/\B(?=(\d{3})+(?!\d))/g, ","),
            status: formData.get('status'), // Formdan gelen verileri al
            insuranceDate: formData.get('insuranceDate'),
            inspectionDate: formData.get('inspectionDate'),
        };
        if (state.editingVehicleIndex !== null) {
            // Editing existing vehicle
            const originalVehicle = vehiclesData[state.editingVehicleIndex];
            // Dosya güncellemelerini yönet: sadece yeni bir dosya seçilmişse güncelle
            if (insuranceFile && insuranceFile.size > 0) {
                if (originalVehicle.insuranceFileUrl)
                    URL.revokeObjectURL(originalVehicle.insuranceFileUrl);
                vehicleDataUpdate.insuranceFile = insuranceFile.name;
                vehicleDataUpdate.insuranceFileUrl = URL.createObjectURL(insuranceFile);
            }
            if (inspectionFile && inspectionFile.size > 0) {
                if (originalVehicle.inspectionFileUrl)
                    URL.revokeObjectURL(originalVehicle.inspectionFileUrl);
                vehicleDataUpdate.inspectionFile = inspectionFile.name;
                vehicleDataUpdate.inspectionFileUrl = URL.createObjectURL(inspectionFile);
            }
            if (licenseFile && licenseFile.size > 0) {
                if (originalVehicle.licenseFileUrl)
                    URL.revokeObjectURL(originalVehicle.licenseFileUrl);
                vehicleDataUpdate.licenseFile = licenseFile.name;
                vehicleDataUpdate.licenseFileUrl = URL.createObjectURL(licenseFile);
            }
            vehiclesData[state.editingVehicleIndex] = { ...originalVehicle, ...vehicleDataUpdate };
        }
        else {
            // Adding new vehicle
            if (insuranceFile && insuranceFile.size > 0) {
                vehicleDataUpdate.insuranceFile = insuranceFile.name;
                vehicleDataUpdate.insuranceFileUrl = URL.createObjectURL(insuranceFile);
            }
            if (inspectionFile && inspectionFile.size > 0) {
                vehicleDataUpdate.inspectionFile = inspectionFile.name;
                vehicleDataUpdate.inspectionFileUrl = URL.createObjectURL(inspectionFile);
            }
            if (licenseFile && licenseFile.size > 0) {
                vehicleDataUpdate.licenseFile = licenseFile.name;
                vehicleDataUpdate.licenseFileUrl = URL.createObjectURL(licenseFile);
            }
            logActivity('fa-car-side', `<strong>${vehicleDataUpdate.plate}</strong> plakalı yeni araç filoya eklendi.`);
            vehiclesData.unshift(vehicleDataUpdate); // Add to the beginning of the array
        }
        setState({
            isVehicleModalOpen: false,
            editingVehicleIndex: null,
        });
        showToast(state.editingVehicleIndex !== null ? 'Araç başarıyla güncellendi.' : 'Yeni araç başarıyla eklendi.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleVehicleFormSubmit içinde:", error);
    }
}
function handleCustomerFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        const idFile = formData.get('idFile');
        const licenseFile = formData.get('licenseFile');
        const customerDataUpdate = {
            name: formData.get('name'),
            tc: formData.get('tc'),
            phone: formData.get('phone'),
            email: formData.get('email'),
            licenseNumber: formData.get('licenseNumber'),
            licenseDate: formData.get('licenseDate'),
            address: formData.get('address'),
        };
        if (state.editingCustomerIndex !== null) {
            // Editing existing customer
            const originalCustomer = customersData[state.editingCustomerIndex];
            if (idFile && idFile.size > 0) {
                if (originalCustomer.idFileUrl)
                    URL.revokeObjectURL(originalCustomer.idFileUrl);
                customerDataUpdate.idFile = idFile.name;
                customerDataUpdate.idFileUrl = URL.createObjectURL(idFile);
            }
            if (licenseFile && licenseFile.size > 0) {
                if (originalCustomer.licenseFileUrl)
                    URL.revokeObjectURL(originalCustomer.licenseFileUrl);
                customerDataUpdate.licenseFile = licenseFile.name;
                customerDataUpdate.licenseFileUrl = URL.createObjectURL(licenseFile);
            }
            customersData[state.editingCustomerIndex] = { ...originalCustomer, ...customerDataUpdate };
        }
        else {
            // Adding new customer
            if (idFile && idFile.size > 0) {
                customerDataUpdate.idFile = idFile.name;
                customerDataUpdate.idFileUrl = URL.createObjectURL(idFile);
            }
            if (licenseFile && licenseFile.size > 0) {
                customerDataUpdate.licenseFile = licenseFile.name;
                customerDataUpdate.licenseFileUrl = URL.createObjectURL(licenseFile);
            }
            const newCustomer = {
                id: Date.now(),
                rentals: [],
                ...customerDataUpdate
            };
            logActivity('fa-user-plus', `<strong>${newCustomer.name}</strong> adında yeni müşteri kaydedildi.`);
            customersData.unshift(newCustomer);
        }
        setState({
            isCustomerModalOpen: false,
            editingCustomerIndex: null,
        });
        showToast(state.editingCustomerIndex !== null ? 'Müşteri bilgileri güncellendi.' : 'Yeni müşteri başarıyla eklendi.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleCustomerFormSubmit içinde:", error);
    }
}
function handleRentalEditFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const rentalId = parseInt(formData.get('rentalId'), 10);
    try {
        const rentalIndex = rentalsData.findIndex(r => r.id === rentalId);
        if (rentalIndex === -1)
            return;
        const originalRental = rentalsData[rentalIndex];
        const contractFile = formData.get('contractFile');
        const invoiceFile = formData.get('invoiceFile');
        const rentalDataUpdate = {
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate') || null,
            startKm: parseInt(formData.get('startKm'), 10),
            endKm: formData.get('endKm') ? parseInt(formData.get('endKm'), 10) : null,
        };
        if (contractFile && contractFile.size > 0) {
            if (originalRental.contractFileUrl)
                URL.revokeObjectURL(originalRental.contractFileUrl);
            rentalDataUpdate.contractFile = contractFile.name;
            rentalDataUpdate.contractFileUrl = URL.createObjectURL(contractFile);
        }
        if (invoiceFile && invoiceFile.size > 0) {
            if (originalRental.invoiceFileUrl)
                URL.revokeObjectURL(originalRental.invoiceFileUrl);
            rentalDataUpdate.invoiceFile = invoiceFile.name;
            rentalDataUpdate.invoiceFileUrl = URL.createObjectURL(invoiceFile);
        }
        rentalsData[rentalIndex] = { ...originalRental, ...rentalDataUpdate };
        setState({ isRentalEditModalOpen: false, editingRentalId: null });
        showToast('Kiralama kaydı güncellendi.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleRentalEditFormSubmit içinde:", error);
    }
}
function handleReservationEditFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const reservationId = parseInt(formData.get('reservationId'), 10);
    try {
        const resIndex = reservationsData.findIndex(r => r.id === reservationId);
        if (resIndex === -1)
            return;
        const originalReservation = reservationsData[resIndex];
        const updatedReservation = {
            ...originalReservation,
            vehiclePlate: formData.get('vehiclePlate'),
            customerId: parseInt(formData.get('customerId'), 10),
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            deliveryLocation: formData.get('deliveryLocation'),
            notes: formData.get('notes') || null,
        };
        reservationsData[resIndex] = updatedReservation;
        setState({ isReservationEditModalOpen: false, editingReservationId: null });
        showToast('Rezervasyon güncellendi.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleReservationEditFormSubmit içinde:", error);
    }
}
function handleReservationFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        let customerId;
        const customerType = formData.get('customerType');
        if (customerType === 'new') {
            const newCustomer = {
                id: Date.now(),
                name: formData.get('newCustomerName'),
                phone: formData.get('newCustomerPhone'),
                tc: '', email: '', address: '', licenseNumber: '', licenseDate: '',
                idFile: null, idFileUrl: null, licenseFile: null, licenseFileUrl: null,
                rentals: [],
            };
            customersData.unshift(newCustomer);
            customerId = newCustomer.id;
        }
        else {
            customerId = parseInt(formData.get('customerId'), 10);
            if (!customersData.some(c => c.id === customerId)) {
                showToast('Lütfen geçerli bir müşteri seçin.', 'error');
                return;
            }
        }
        const vehiclePlate = formData.get('vehiclePlate');
        if (!vehiclesData.some(v => v.plate === vehiclePlate)) {
            showToast('Lütfen geçerli bir araç seçin.', 'error');
            return;
        }
        const newReservation = {
            id: Date.now(),
            vehiclePlate: vehiclePlate,
            customerId: customerId,
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            deliveryLocation: formData.get('deliveryLocation'),
            notes: formData.get('notes') || null,
            status: 'active',
        };
        reservationsData.unshift(newReservation);
        setState({ isReservationModalOpen: false });
        showToast('Yeni rezervasyon başarıyla oluşturuldu.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleReservationFormSubmit içinde:", error);
    }
}
function handleRentalFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        let customerId;
        let customerName;
        let customerPhone;
        const customerType = formData.get('customerType');
        if (customerType === 'new') {
            // Create and add new customer
            const newCustomer = {
                id: Date.now(), // Simple unique ID
                name: formData.get('newCustomerName'),
                tc: formData.get('newCustomerTc'),
                phone: formData.get('newCustomerPhone'),
                email: formData.get('newCustomerEmail'),
                address: '',
                licenseNumber: '',
                licenseDate: '',
                idFile: null, idFileUrl: null,
                licenseFile: null, licenseFileUrl: null,
                rentals: [],
            };
            customersData.unshift(newCustomer);
            customerId = newCustomer.id;
            customerName = newCustomer.name;
            customerPhone = newCustomer.phone;
        }
        else {
            // Get existing customer
            customerId = parseInt(formData.get('customerId'), 10);
            const customer = customersData.find(c => c.id === customerId);
            if (!customer) {
                showToast('Lütfen geçerli bir müşteri seçin.', 'error');
                return;
            }
            customerName = customer.name;
            customerPhone = customer.phone;
        }
        // Create new rental record
        const newRental = {
            id: Date.now(),
            vehiclePlate: formData.get('vehiclePlate'),
            customerId: customerId,
            startDate: formData.get('startDate'),
            endDate: null,
            startKm: parseInt(formData.get('startKm').replace(/,/, ''), 10),
            endKm: null,
            price: parseFloat(formData.get('price')),
            priceType: formData.get('priceType'),
            totalCost: null,
            contractFile: null, contractFileUrl: null,
            invoiceFile: null, invoiceFileUrl: null,
            status: 'active',
        };
        rentalsData.unshift(newRental);
        // Update vehicle status
        const vehicleIndex = vehiclesData.findIndex(v => v.plate === newRental.vehiclePlate);
        if (vehicleIndex > -1) {
            vehiclesData[vehicleIndex].status = 'Kirada';
            vehiclesData[vehicleIndex].rentedBy = { name: customerName, phone: customerPhone };
            vehiclesData[vehicleIndex].activeRentalId = newRental.id;
            logActivity('fa-file-signature', `<strong>${customerName}</strong>, <em>${newRental.vehiclePlate}</em> plakalı aracı kiraladı.`);
        }
        // Close modal and re-render
        setState({ isRentalModalOpen: false });
        showToast('Kiralama başarıyla başlatıldı.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleRentalFormSubmit içinde:", error);
    }
}
function handleCheckInFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        const rentalId = parseInt(formData.get('rentalId'), 10);
        const returnDate = formData.get('returnDate');
        const returnKm = parseInt(formData.get('returnKm'), 10);
        // Find and update rental
        const rentalIndex = rentalsData.findIndex(r => r.id === rentalId);
        if (rentalIndex === -1) {
            showToast('Hata: Kiralama kaydı bulunamadı.', 'error');
            return;
        }
        const rental = rentalsData[rentalIndex];
        rental.endDate = returnDate;
        rental.endKm = returnKm;
        rental.status = 'completed';
        // Calculate total cost
        const startDate = new Date(rental.startDate);
        const endDate = new Date(returnDate);
        const timeDiff = endDate.getTime() - startDate.getTime();
        const daysRented = Math.max(1, Math.ceil(timeDiff / (1000 * 3600 * 24))); // Min 1 day
        if (rental.priceType === 'daily') {
            rental.totalCost = daysRented * rental.price;
        }
        else { // monthly
            const monthsRented = daysRented / 30;
            rental.totalCost = monthsRented * rental.price;
        }
        // Find and update vehicle
        const vehicleIndex = vehiclesData.findIndex(v => v.plate === rental.vehiclePlate);
        if (vehicleIndex > -1) {
            vehiclesData[vehicleIndex].status = 'Müsait';
            vehiclesData[vehicleIndex].km = returnKm.toLocaleString('tr-TR');
            delete vehiclesData[vehicleIndex].rentedBy;
            delete vehiclesData[vehicleIndex].activeRentalId;
            const customer = customersData.find(c => c.id === rental.customerId);
            if (customer) {
                logActivity('fa-right-to-bracket', `<em>${rental.vehiclePlate}</em> plakalı araç <strong>${customer.name}</strong>'dan teslim alındı.`);
            }
        }
        // Close modal and re-render
        setState({ isCheckInModalOpen: false });
        showToast('Araç başarıyla teslim alındı.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleCheckInFormSubmit içinde:", error);
    }
}
function handleMaintenanceFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    try {
        const newMaintenance = {
            id: Date.now(),
            vehiclePlate: formData.get('vehiclePlate'),
            maintenanceDate: formData.get('maintenanceDate'),
            maintenanceKm: parseInt(formData.get('maintenanceKm'), 10),
            type: formData.get('type'),
            cost: parseFloat(formData.get('cost')),
            description: formData.get('description'),
            nextMaintenanceKm: parseInt(formData.get('nextMaintenanceKm'), 10),
            nextMaintenanceDate: formData.get('nextMaintenanceDate'),
        };
        maintenanceData.unshift(newMaintenance);
        logActivity('fa-oil-can', `<em>${newMaintenance.vehiclePlate}</em> plakalı araca bakım kaydı girildi.`);
        setState({ isMaintenanceModalOpen: false });
        showToast('Bakım kaydı başarıyla oluşturuldu.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleMaintenanceFormSubmit içinde:", error);
    }
}
function handleMaintenanceEditFormSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const maintenanceId = parseInt(formData.get('maintenanceId'), 10);
    try {
        const maintIndex = maintenanceData.findIndex(m => m.id === maintenanceId);
        if (maintIndex === -1)
            return;
        const originalMaintenance = maintenanceData[maintIndex];
        const updatedMaintenance = {
            ...originalMaintenance,
            vehiclePlate: formData.get('vehiclePlate'),
            maintenanceDate: formData.get('maintenanceDate'),
            maintenanceKm: parseInt(formData.get('maintenanceKm'), 10),
            type: formData.get('type'),
            cost: parseFloat(formData.get('cost')),
            description: formData.get('description'),
            nextMaintenanceKm: parseInt(formData.get('nextMaintenanceKm'), 10),
            nextMaintenanceDate: formData.get('nextMaintenanceDate'),
        };
        maintenanceData[maintIndex] = updatedMaintenance;
        setState({ isMaintenanceEditModalOpen: false, editingMaintenanceId: null });
        showToast('Bakım kaydı güncellendi.', 'success');
    }
    catch (error) {
        console.error("!!! HATA: handleMaintenanceEditFormSubmit içinde:", error);
    }
}
function formatTimeAgo(date) {
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
    let interval = seconds / 31536000;
    if (interval > 1)
        return Math.floor(interval) + " yıl önce";
    interval = seconds / 2592000;
    if (interval > 1)
        return Math.floor(interval) + " ay önce";
    interval = seconds / 86400;
    if (interval > 1)
        return Math.floor(interval) + " gün önce";
    interval = seconds / 3600;
    if (interval > 1)
        return Math.floor(interval) + " saat önce";
    interval = seconds / 60;
    if (interval > 1)
        return Math.floor(interval) + " dakika önce";
    return "az önce";
}
function generateRentalSummaryPDF(rental) {
    try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({ unit: 'mm', format: 'a4' });

        // --- FONT DEFINITIONS ---
        // Using built-in Helvetica font
        doc.setFont('Helvetica');

        const customer = customersData.find(c => c.id === rental.customerId);
        const vehicle = vehiclesData.find(v => v.plate === rental.vehiclePlate);

        const formatDate = (dateInput) => {
            if (!dateInput) return 'Belirtilmemiş';
            return new Date(dateInput).toLocaleDateString('tr-TR', { year: 'numeric', month: 'long', day: 'numeric' });
        };
        const formatKm = (km) => km ? km.toLocaleString('tr-TR') + ' km' : 'N/A';
        const formatCost = (cost) => cost ? `₺${cost.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : 'Hesaplanmadı';

        const startDate = rental.startDate ? new Date(rental.startDate) : null;
        const endDate = rental.endDate ? new Date(rental.endDate) : null;
        let totalDays = 'N/A';
        if (startDate && endDate) {
            const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
            totalDays = Math.max(1, Math.ceil(diffTime / (1000 * 60 * 60 * 24))).toString();
        }
        const totalKm = (rental.endKm && rental.startKm) ? (rental.endKm - rental.startKm).toLocaleString('tr-TR') + ' km' : 'N/A';

        // --- STYLING & COLORS ---
        const primaryColor = '#1D4ED8'; // Daha koyu, modern bir mavi
        const textColor = '#1F2937'; // Neredeyse siyah
        const mutedColor = '#6B7280'; // Gri
        const lightBg = '#F9FAFB'; // Çok açık gri arka plan
        const white = '#FFFFFF';
        const borderColor = '#E5E7EB'; // Açık gri border

        const margin = 15;
        const contentWidth = 210 - (margin * 2);
        let y = 0; // y pozisyonunu sıfırdan başlat

        const getImageFormat = (base64) => {
            if (!base64 || !base64.startsWith('data:image')) return 'PNG';
            const match = base64.match(/^data:image\/(png|jpe?g);base64,/);
            return match ? match[1].replace('jpeg', 'JPEG').toUpperCase() : 'PNG';
        };

        // --- BACKGROUND ---
        if (state.settings.pdfSettings.showBackground && state.settings.companyInfo.pdfBackground) {
            try {
                doc.addImage(state.settings.companyInfo.pdfBackground, getImageFormat(state.settings.companyInfo.pdfBackground), 0, 0, 210, 297, '', 'FAST');
            } catch (e) {
                console.error("PDF Arka Planı eklenirken hata oluştu:", e);
            }
        } else {
            doc.setFillColor(lightBg);
            doc.rect(0, 0, 210, 297, 'F');
        }


        // --- HEADER ---
        y = 20;
        if (state.settings.pdfSettings.showLogo && state.settings.companyInfo.logo) {
            try {
                doc.addImage(state.settings.companyInfo.logo, getImageFormat(state.settings.companyInfo.logo), margin, y, 45, 15, '', 'FAST');
            } catch (e) {
                console.error("PDF Logosu eklenirken hata oluştu:", e);
            }
        }

        doc.setFont('Helvetica', 'bold');
        doc.setFontSize(16);
        doc.setTextColor(textColor);
        doc.text(state.settings.companyInfo.name.toUpperCase(), 210 - margin, y + 5, { align: 'right' });

        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(9);
        doc.setTextColor(mutedColor);
        doc.text(`Rapor Tarihi: ${new Date().toLocaleDateString('tr-TR')}`, 210 - margin, y + 10, { align: 'right' });
        doc.text(`Kayıt No: #${rental.id}`, 210 - margin, y + 14, { align: 'right' });

        y += 30;

        // --- MAIN TITLE ---
        doc.setFont('Helvetica', 'bold');
        doc.setFontSize(26);
        doc.setTextColor(primaryColor);
        doc.text("KİRALAMA ÖZETİ", margin, y);
        y += 8;
        doc.setDrawColor(borderColor);
        doc.setLineWidth(0.5);
        doc.line(margin, y, 210 - margin, y);
        y += 15;


        // --- DETAILS SECTION ---
        const drawSection = (title, icon, data) => {
            const cardX = margin;
            const cardY = y;
            const cardWidth = contentWidth;
            const titleHeight = 12;
            const contentPadding = 10;
            let contentHeight = 15; // Padding top and bottom
            data.forEach(item => {
                const valueLines = doc.splitTextToSize(item.value, cardWidth / 2 - contentPadding - 5);
                contentHeight += (valueLines.length * 7);
            });


            // Card background with shadow
            doc.setFillColor(white);
            doc.setDrawColor(white);
            doc.roundedRect(cardX, cardY, cardWidth, contentHeight + titleHeight, 3, 3, 'FD');

            // Title bar
            doc.setFillColor(primaryColor);
            doc.roundedRect(cardX, cardY, cardWidth, titleHeight, 3, 3, 'F');

            doc.setFont('Helvetica', 'bold');
            doc.setFontSize(12);
            doc.setTextColor(white);
            // Ikonu burada ekleyebiliriz (eğer base64 olarak varsa)
            // doc.addImage(icon, 'PNG', cardX + 5, cardY + 3, 6, 6);
            doc.text(title, cardX + 7, cardY + 8.5);

            y += titleHeight + contentPadding;

            // Content
            doc.setFont('Helvetica', 'normal');
            doc.setFontSize(10);
            data.forEach(item => {
                doc.setTextColor(mutedColor);
                doc.text(item.label, cardX + contentPadding, y);

                doc.setTextColor(textColor);
                doc.setFont('Helvetica', 'bold');
                doc.text(item.value, cardX + 60, y);
                y += 7;
            });

            y += 15; // Space between sections
        };

        drawSection('Müşteri Bilgileri', '', [
            { label: 'Ad Soyad:', value: customer?.name || 'N/A' },
            { label: 'Telefon:', value: customer?.phone || 'N/A' },
            { label: 'E-posta:', value: customer?.email || 'N/A' }
        ]);

        drawSection('Araç Bilgileri', '', [
            { label: 'Plaka:', value: vehicle?.plate || 'N/A' },
            { label: 'Marka/Model:', value: vehicle?.brand || 'N/A' },
            { label: 'Başlangıç KM:', value: formatKm(rental.startKm) },
            { label: 'Bitiş KM:', value: formatKm(rental.endKm) }
        ]);

        drawSection('Kiralama Detayları', '', [
            { label: 'Başlangıç Tarihi:', value: formatDate(rental.startDate) },
            { label: 'Bitiş Tarihi:', value: formatDate(endDate) },
            { label: 'Toplam Gün:', value: totalDays },
            { label: 'Toplam KM:', value: totalKm },
            { label: 'Ücret:', value: formatCost(rental.totalCost) }
        ]);


        // --- FOOTER ---
        if (state.settings.pdfSettings.showFooter) {
            const pageHeight = doc.internal.pageSize.height;
            const footerY = pageHeight - 25;
            doc.setDrawColor(borderColor);
            doc.setLineWidth(0.3);
            doc.line(margin, footerY, 210 - margin, footerY);

            doc.setFont('Helvetica', 'normal');
            doc.setFontSize(8);
            doc.setTextColor(mutedColor);
            doc.text("Bizi tercih ettiğiniz için teşekkür ederiz.", 105, footerY + 8, { align: 'center' });
            const companyInfoLine = `${state.settings.companyInfo.name} | ${state.settings.companyInfo.address} | Tel: ${state.settings.companyInfo.phone}`;
            doc.text(companyInfoLine, 105, footerY + 12, { align: 'center' });
        }

        doc.save(`kiralama-ozeti-${vehicle?.plate || 'bilgi-yok'}-${rental.id}.pdf`);

    } catch (error) {
        console.error("PDF oluşturma sırasında kritik bir hata oluştu:", error);
        showToast("PDF oluşturulamadı. Lütfen konsolu kontrol edin.", "error");
    }
}
/**
 * Ekranda geçici bir bildirim (toast) gösterir.
 * @param message Gösterilecek mesaj.
 * @param type 'success' veya 'error'
 * @param duration Bildirimin ekranda kalma süresi (ms).
 */
function showToast(message, type = 'success', duration = 4000) {
    // Toast container'ı oluştur veya mevcut olanı bul
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        document.body.appendChild(toastContainer);
    }
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    const icon = type === 'success' ? 'fa-check-circle' : 'fa-times-circle';
    toast.innerHTML = `
        <i class="fa-solid ${icon}"></i>
        <span>${message}</span>
    `;
    toastContainer.appendChild(toast);
    // Animasyonla göster
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    // Belirtilen süre sonunda kaldır
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            toast.remove();
        }, 500); // CSS animasyonunun bitmesini bekle
    }, duration);
}
// Uygulama ilk yüklendiğinde verileri localStorage'dan yükleme fonksiyonu
function loadDataFromLocalStorage() {
    const savedData = localStorage.getItem('rehberOtomotivData');
    if (savedData) {
        try {
            const appData = JSON.parse(savedData);
            // Sadece appData'da varsa üzerine yaz, yoksa mevcut mockup veriyi koru.
            // JSON.parse, Date objelerini string'e çevirir. Bunları tekrar Date objesine dönüştürmemiz gerekiyor.
            if (appData.vehiclesData)
                vehiclesData = appData.vehiclesData; // Tarih objesi yok
            if (appData.customersData)
                customersData = appData.customersData; // Tarih objesi yok
            if (appData.maintenanceData)
                maintenanceData = appData.maintenanceData; // Tarih objesi yok
            if (appData.rentalsData) {
                rentalsData = appData.rentalsData.map(r => ({ ...r, startDate: new Date(r.startDate), endDate: r.endDate ? new Date(r.endDate) : null }));
            }
            if (appData.reservationsData) {
                reservationsData = appData.reservationsData.map(r => ({ ...r, startDate: new Date(r.startDate), endDate: new Date(r.endDate) }));
            }
            // Aktiviteler, JSON'dan yüklenirken Date objesine geri çevrilmeli.
            if (appData.activitiesData && Array.isArray(appData.activitiesData)) {
                activitiesData = appData.activitiesData.map(activity => activity && activity.time ? { ...activity, time: new Date(activity.time) } : activity).filter(Boolean); // Bozuk veya null kayıtları temizle
            }
            // State'e ait verileri yükle
            if (appData.theme)
                state.theme = appData.theme;
            if (appData.readNotifications)
                state.readNotifications = appData.readNotifications;
            // Ayarları birleştirerek yükle, böylece yeni eklenen ayarlar kaybolmaz
            if (appData.settings) {
                state.settings = { ...state.settings, ...appData.settings };
                state.settings.companyInfo = { ...state.settings.companyInfo, ...appData.settings.companyInfo };
            }
        }
        catch (e) {
            console.error("!!! HATA: localStorage'dan veri okunurken bir sorun oluştu. Kayıtlı veri bozuk olabilir.", e);
        }
    }
    // İçe aktarma sonrası başarı mesajını göster
    if (localStorage.getItem('showImportSuccessToast') === 'true') {
        showToast('Veriler başarıyla içe aktarıldı!', 'success');
        localStorage.removeItem('showImportSuccessToast'); // Mesajı gösterdikten sonra işareti kaldır
    }
}
// Initial render
loadDataFromLocalStorage(); // Uygulama açılırken verileri yükle
renderApp();
